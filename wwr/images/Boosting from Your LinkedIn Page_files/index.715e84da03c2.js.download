var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// ../../node_modules/@vidyard/embed-code/dist/v4.umd.js
var require_v4_umd = __commonJS({
  "../../node_modules/@vidyard/embed-code/dist/v4.umd.js"(exports, module2) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module2 === "object")
        module2.exports = factory();
      else if (typeof define === "function" && define.amd)
        define([], factory);
      else if (typeof exports === "object")
        exports["vidyardEmbed"] = factory();
      else
        root["vidyardEmbed"] = factory();
    })(window, function() {
      return (
        /******/
        function(modules) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
              return installedModules[moduleId].exports;
            }
            var module3 = installedModules[moduleId] = {
              /******/
              i: moduleId,
              /******/
              l: false,
              /******/
              exports: {}
              /******/
            };
            modules[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
            module3.l = true;
            return module3.exports;
          }
          __webpack_require__.m = modules;
          __webpack_require__.c = installedModules;
          __webpack_require__.d = function(exports2, name, getter) {
            if (!__webpack_require__.o(exports2, name)) {
              Object.defineProperty(exports2, name, { enumerable: true, get: getter });
            }
          };
          __webpack_require__.r = function(exports2) {
            if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
              Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
            }
            Object.defineProperty(exports2, "__esModule", { value: true });
          };
          __webpack_require__.t = function(value, mode) {
            if (mode & 1)
              value = __webpack_require__(value);
            if (mode & 8)
              return value;
            if (mode & 4 && typeof value === "object" && value && value.__esModule)
              return value;
            var ns = /* @__PURE__ */ Object.create(null);
            __webpack_require__.r(ns);
            Object.defineProperty(ns, "default", { enumerable: true, value });
            if (mode & 2 && typeof value != "string")
              for (var key in value)
                __webpack_require__.d(ns, key, function(key2) {
                  return value[key2];
                }.bind(null, key));
            return ns;
          };
          __webpack_require__.n = function(module3) {
            var getter = module3 && module3.__esModule ? (
              /******/
              function getDefault() {
                return module3["default"];
              }
            ) : (
              /******/
              function getModuleExports() {
                return module3;
              }
            );
            __webpack_require__.d(getter, "a", getter);
            return getter;
          };
          __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };
          __webpack_require__.p = "";
          return __webpack_require__(__webpack_require__.s = 6);
        }([
          /* 0 */
          /***/
          function(module3, exports2) {
            var g;
            g = function() {
              return this;
            }();
            try {
              g = g || Function("return this")() || (1, eval)("this");
            } catch (e) {
              if (typeof window === "object")
                g = window;
            }
            module3.exports = g;
          },
          /* 1 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            function _extends() {
              _extends = Object.assign || function(target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i];
                  for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                    }
                  }
                }
                return target;
              };
              return _extends.apply(this, arguments);
            }
            var CustomEvent2 = __webpack_require__(14);
            var util = __webpack_require__(13);
            var mainEl;
            var trappedEl;
            var dirtyObjects;
            var filterSvg = function filterSvg2(item) {
              return item.tagName.toLowerCase() !== "svg";
            };
            function showElementPrep(el, useHiddenProperty) {
              var preparedElement;
              if (useHiddenProperty === false) {
                preparedElement = prepareElement(el, "aria-hidden", "false");
              } else {
                preparedElement = prepareElement(el, "hidden", false);
              }
              return preparedElement;
            }
            function hideElementPrep(el, useHiddenProperty) {
              var preparedElement;
              if (useHiddenProperty === false) {
                preparedElement = prepareElement(el, "aria-hidden", "true");
              } else {
                preparedElement = prepareElement(el, "hidden", true);
              }
              return preparedElement;
            }
            function prepareElement(el, attributeName, dirtyValue) {
              var isProperty = typeof dirtyValue === "boolean";
              return {
                el,
                attributeName,
                cleanValue: isProperty ? el[attributeName] : el.getAttribute(attributeName),
                dirtyValue,
                isProperty
              };
            }
            function dirtyElement(preparedObj) {
              if (preparedObj.isProperty === true) {
                preparedObj.el[preparedObj.attributeName] = preparedObj.dirtyValue;
              } else {
                preparedObj.el.setAttribute(preparedObj.attributeName, preparedObj.dirtyValue);
              }
            }
            function cleanElement(preparedObj) {
              if (preparedObj.cleanValue) {
                if (preparedObj.isProperty === true) {
                  preparedObj.el[preparedObj.attributeName] = preparedObj.cleanValue;
                } else {
                  preparedObj.el.setAttribute(preparedObj.attributeName, preparedObj.cleanValue);
                }
              } else {
                preparedObj.el.removeAttribute(preparedObj.attributeName);
              }
            }
            function untrap() {
              if (trappedEl) {
                dirtyObjects.forEach(function(item) {
                  return cleanElement(item);
                });
                dirtyObjects = [];
                if (mainEl) {
                  mainEl.setAttribute("role", "main");
                }
                trappedEl.dispatchEvent(new CustomEvent2("screenreaderUntrap", {
                  bubbles: true
                }));
                trappedEl = null;
              }
            }
            var defaultOptions = {
              useHiddenProperty: false
            };
            function trap(el, selectedOptions) {
              untrap();
              var options = _extends({}, defaultOptions, selectedOptions);
              trappedEl = el;
              mainEl = document.querySelector('main, [role="main"]');
              if (mainEl) {
                mainEl.setAttribute("role", "presentation");
              }
              var ancestors = util.getAncestors(trappedEl);
              var siblings = util.getSiblings(trappedEl);
              var siblingsOfAncestors = util.getSiblingsOfAncestors(trappedEl);
              if (options.useHiddenProperty === true) {
                siblings = siblings.filter(filterSvg);
                siblingsOfAncestors = siblingsOfAncestors.filter(filterSvg);
              }
              dirtyObjects = [showElementPrep(trappedEl, options.useHiddenProperty)].concat(ancestors.map(function(item) {
                return showElementPrep(item, options.useHiddenProperty);
              })).concat(siblings.map(function(item) {
                return hideElementPrep(item, options.useHiddenProperty);
              })).concat(siblingsOfAncestors.map(function(item) {
                return hideElementPrep(item, options.useHiddenProperty);
              }));
              dirtyObjects.forEach(function(item) {
                return dirtyElement(item);
              });
              trappedEl.dispatchEvent(new CustomEvent2("screenreaderTrap", {
                bubbles: true
              }));
            }
            module3.exports = {
              trap,
              untrap
            };
          },
          /* 2 */
          /***/
          function(module3, exports2, __webpack_require__) {
            var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
            (function(root, factory) {
              "use strict";
              if (true) {
                !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(7)], __WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function" ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports2, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== void 0 && (module3.exports = __WEBPACK_AMD_DEFINE_RESULT__));
              } else {
              }
            })(this, function ErrorStackParser(StackFrame) {
              "use strict";
              var FIREFOX_SAFARI_STACK_REGEXP = /(^|@)\S+\:\d+/;
              var CHROME_IE_STACK_REGEXP = /^\s*at .*(\S+\:\d+|\(native\))/m;
              var SAFARI_NATIVE_CODE_REGEXP = /^(eval@)?(\[native code\])?$/;
              return {
                /**
                 * Given an Error object, extract the most information from it.
                 *
                 * @param {Error} error object
                 * @return {Array} of StackFrames
                 */
                parse: function ErrorStackParser$$parse(error) {
                  if (typeof error.stacktrace !== "undefined" || typeof error["opera#sourceloc"] !== "undefined") {
                    return this.parseOpera(error);
                  } else if (error.stack && error.stack.match(CHROME_IE_STACK_REGEXP)) {
                    return this.parseV8OrIE(error);
                  } else if (error.stack) {
                    return this.parseFFOrSafari(error);
                  } else {
                    throw new Error("Cannot parse given Error object");
                  }
                },
                // Separate line and column numbers from a string of the form: (URI:Line:Column)
                extractLocation: function ErrorStackParser$$extractLocation(urlLike) {
                  if (urlLike.indexOf(":") === -1) {
                    return [urlLike];
                  }
                  var regExp = /(.+?)(?:\:(\d+))?(?:\:(\d+))?$/;
                  var parts = regExp.exec(urlLike.replace(/[\(\)]/g, ""));
                  return [parts[1], parts[2] || void 0, parts[3] || void 0];
                },
                parseV8OrIE: function ErrorStackParser$$parseV8OrIE(error) {
                  var filtered = error.stack.split("\n").filter(function(line) {
                    return !!line.match(CHROME_IE_STACK_REGEXP);
                  }, this);
                  return filtered.map(function(line) {
                    if (line.indexOf("(eval ") > -1) {
                      line = line.replace(/eval code/g, "eval").replace(/(\(eval at [^\()]*)|(\)\,.*$)/g, "");
                    }
                    var tokens = line.replace(/^\s+/, "").replace(/\(eval code/g, "(").split(/\s+/).slice(1);
                    var locationParts = this.extractLocation(tokens.pop());
                    var functionName = tokens.join(" ") || void 0;
                    var fileName = ["eval", "<anonymous>"].indexOf(locationParts[0]) > -1 ? void 0 : locationParts[0];
                    return new StackFrame({
                      functionName,
                      fileName,
                      lineNumber: locationParts[1],
                      columnNumber: locationParts[2],
                      source: line
                    });
                  }, this);
                },
                parseFFOrSafari: function ErrorStackParser$$parseFFOrSafari(error) {
                  var filtered = error.stack.split("\n").filter(function(line) {
                    return !line.match(SAFARI_NATIVE_CODE_REGEXP);
                  }, this);
                  return filtered.map(function(line) {
                    if (line.indexOf(" > eval") > -1) {
                      line = line.replace(/ line (\d+)(?: > eval line \d+)* > eval\:\d+\:\d+/g, ":$1");
                    }
                    if (line.indexOf("@") === -1 && line.indexOf(":") === -1) {
                      return new StackFrame({
                        functionName: line
                      });
                    } else {
                      var functionNameRegex = /((.*".+"[^@]*)?[^@]*)(?:@)/;
                      var matches = line.match(functionNameRegex);
                      var functionName = matches && matches[1] ? matches[1] : void 0;
                      var locationParts = this.extractLocation(line.replace(functionNameRegex, ""));
                      return new StackFrame({
                        functionName,
                        fileName: locationParts[0],
                        lineNumber: locationParts[1],
                        columnNumber: locationParts[2],
                        source: line
                      });
                    }
                  }, this);
                },
                parseOpera: function ErrorStackParser$$parseOpera(e) {
                  if (!e.stacktrace || e.message.indexOf("\n") > -1 && e.message.split("\n").length > e.stacktrace.split("\n").length) {
                    return this.parseOpera9(e);
                  } else if (!e.stack) {
                    return this.parseOpera10(e);
                  } else {
                    return this.parseOpera11(e);
                  }
                },
                parseOpera9: function ErrorStackParser$$parseOpera9(e) {
                  var lineRE = /Line (\d+).*script (?:in )?(\S+)/i;
                  var lines = e.message.split("\n");
                  var result = [];
                  for (var i = 2, len = lines.length; i < len; i += 2) {
                    var match = lineRE.exec(lines[i]);
                    if (match) {
                      result.push(new StackFrame({
                        fileName: match[2],
                        lineNumber: match[1],
                        source: lines[i]
                      }));
                    }
                  }
                  return result;
                },
                parseOpera10: function ErrorStackParser$$parseOpera10(e) {
                  var lineRE = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i;
                  var lines = e.stacktrace.split("\n");
                  var result = [];
                  for (var i = 0, len = lines.length; i < len; i += 2) {
                    var match = lineRE.exec(lines[i]);
                    if (match) {
                      result.push(
                        new StackFrame({
                          functionName: match[3] || void 0,
                          fileName: match[2],
                          lineNumber: match[1],
                          source: lines[i]
                        })
                      );
                    }
                  }
                  return result;
                },
                // Opera 10.65+ Error.stack very similar to FF/Safari
                parseOpera11: function ErrorStackParser$$parseOpera11(error) {
                  var filtered = error.stack.split("\n").filter(function(line) {
                    return !!line.match(FIREFOX_SAFARI_STACK_REGEXP) && !line.match(/^Error created at/);
                  }, this);
                  return filtered.map(function(line) {
                    var tokens = line.split("@");
                    var locationParts = this.extractLocation(tokens.pop());
                    var functionCall = tokens.shift() || "";
                    var functionName = functionCall.replace(/<anonymous function(: (\w+))?>/, "$2").replace(/\([^\)]*\)/g, "") || void 0;
                    var argsRaw;
                    if (functionCall.match(/\(([^\)]*)\)/)) {
                      argsRaw = functionCall.replace(/^[^\(]+\(([^\)]*)\)$/, "$1");
                    }
                    var args = argsRaw === void 0 || argsRaw === "[arguments not available]" ? void 0 : argsRaw.split(",");
                    return new StackFrame({
                      functionName,
                      args,
                      fileName: locationParts[0],
                      lineNumber: locationParts[1],
                      columnNumber: locationParts[2],
                      source: line
                    });
                  }, this);
                }
              };
            });
          },
          /* 3 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", { value: true });
            var Shylog = function() {
              function Shylog2(_a) {
                var _b = _a === void 0 ? { emit: false, logger: console.log } : _a, emit = _b.emit, logger = _b.logger;
                this.emit = emit;
                this.externalLogger = logger;
                this.buffer = [];
                this.customLevel = {};
                this.error = this.setLevel(1);
                this.warn = this.setLevel(2);
                this.info = this.setLevel(3);
                this.log = this.setLevel(4);
              }
              Shylog2.prototype.getLogs = function(level) {
                if (typeof level === "function") {
                  return this.buffer.filter(function(log) {
                    return log.level === level.level;
                  });
                } else {
                  return level ? this.buffer.filter(function(log) {
                    return log.level === level;
                  }) : this.buffer;
                }
              };
              Shylog2.prototype.setLevel = function(level) {
                var _this = this;
                var logFn = function() {
                  var args = [];
                  for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                  }
                  var message = { level, time: Date.now(), msg: args.join(" ") };
                  _this.buffer.push(message);
                  _this.emit && _this.externalLogger(message);
                };
                logFn.level = level;
                this.customLevel[level] = logFn;
                return logFn;
              };
              return Shylog2;
            }();
            exports2.default = Shylog;
          },
          /* 4 */
          /***/
          function(module3, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_exports__["a"] = function(callback) {
              var constructor = this.constructor;
              return this.then(
                function(value) {
                  return constructor.resolve(callback()).then(function() {
                    return value;
                  });
                },
                function(reason) {
                  return constructor.resolve(callback()).then(function() {
                    return constructor.reject(reason);
                  });
                }
              );
            };
          },
          /* 5 */
          /***/
          function(module3, __webpack_exports__, __webpack_require__) {
            "use strict";
            (function(setImmediate) {
              var _finally__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
              var setTimeoutFunc = setTimeout;
              function noop() {
              }
              function bind(fn, thisArg) {
                return function() {
                  fn.apply(thisArg, arguments);
                };
              }
              function Promise2(fn) {
                if (!(this instanceof Promise2))
                  throw new TypeError("Promises must be constructed via new");
                if (typeof fn !== "function")
                  throw new TypeError("not a function");
                this._state = 0;
                this._handled = false;
                this._value = void 0;
                this._deferreds = [];
                doResolve(fn, this);
              }
              function handle(self2, deferred) {
                while (self2._state === 3) {
                  self2 = self2._value;
                }
                if (self2._state === 0) {
                  self2._deferreds.push(deferred);
                  return;
                }
                self2._handled = true;
                Promise2._immediateFn(function() {
                  var cb = self2._state === 1 ? deferred.onFulfilled : deferred.onRejected;
                  if (cb === null) {
                    (self2._state === 1 ? resolve : reject)(deferred.promise, self2._value);
                    return;
                  }
                  var ret;
                  try {
                    ret = cb(self2._value);
                  } catch (e) {
                    reject(deferred.promise, e);
                    return;
                  }
                  resolve(deferred.promise, ret);
                });
              }
              function resolve(self2, newValue) {
                try {
                  if (newValue === self2)
                    throw new TypeError("A promise cannot be resolved with itself.");
                  if (newValue && (typeof newValue === "object" || typeof newValue === "function")) {
                    var then = newValue.then;
                    if (newValue instanceof Promise2) {
                      self2._state = 3;
                      self2._value = newValue;
                      finale(self2);
                      return;
                    } else if (typeof then === "function") {
                      doResolve(bind(then, newValue), self2);
                      return;
                    }
                  }
                  self2._state = 1;
                  self2._value = newValue;
                  finale(self2);
                } catch (e) {
                  reject(self2, e);
                }
              }
              function reject(self2, newValue) {
                self2._state = 2;
                self2._value = newValue;
                finale(self2);
              }
              function finale(self2) {
                if (self2._state === 2 && self2._deferreds.length === 0) {
                  Promise2._immediateFn(function() {
                    if (!self2._handled) {
                      Promise2._unhandledRejectionFn(self2._value);
                    }
                  });
                }
                for (var i = 0, len = self2._deferreds.length; i < len; i++) {
                  handle(self2, self2._deferreds[i]);
                }
                self2._deferreds = null;
              }
              function Handler(onFulfilled, onRejected, promise) {
                this.onFulfilled = typeof onFulfilled === "function" ? onFulfilled : null;
                this.onRejected = typeof onRejected === "function" ? onRejected : null;
                this.promise = promise;
              }
              function doResolve(fn, self2) {
                var done = false;
                try {
                  fn(
                    function(value) {
                      if (done)
                        return;
                      done = true;
                      resolve(self2, value);
                    },
                    function(reason) {
                      if (done)
                        return;
                      done = true;
                      reject(self2, reason);
                    }
                  );
                } catch (ex) {
                  if (done)
                    return;
                  done = true;
                  reject(self2, ex);
                }
              }
              Promise2.prototype["catch"] = function(onRejected) {
                return this.then(null, onRejected);
              };
              Promise2.prototype.then = function(onFulfilled, onRejected) {
                var prom = new this.constructor(noop);
                handle(this, new Handler(onFulfilled, onRejected, prom));
                return prom;
              };
              Promise2.prototype["finally"] = _finally__WEBPACK_IMPORTED_MODULE_0__[
                /* default */
                "a"
              ];
              Promise2.all = function(arr) {
                return new Promise2(function(resolve2, reject2) {
                  if (!arr || typeof arr.length === "undefined")
                    throw new TypeError("Promise.all accepts an array");
                  var args = Array.prototype.slice.call(arr);
                  if (args.length === 0)
                    return resolve2([]);
                  var remaining = args.length;
                  function res(i2, val) {
                    try {
                      if (val && (typeof val === "object" || typeof val === "function")) {
                        var then = val.then;
                        if (typeof then === "function") {
                          then.call(
                            val,
                            function(val2) {
                              res(i2, val2);
                            },
                            reject2
                          );
                          return;
                        }
                      }
                      args[i2] = val;
                      if (--remaining === 0) {
                        resolve2(args);
                      }
                    } catch (ex) {
                      reject2(ex);
                    }
                  }
                  for (var i = 0; i < args.length; i++) {
                    res(i, args[i]);
                  }
                });
              };
              Promise2.resolve = function(value) {
                if (value && typeof value === "object" && value.constructor === Promise2) {
                  return value;
                }
                return new Promise2(function(resolve2) {
                  resolve2(value);
                });
              };
              Promise2.reject = function(value) {
                return new Promise2(function(resolve2, reject2) {
                  reject2(value);
                });
              };
              Promise2.race = function(values) {
                return new Promise2(function(resolve2, reject2) {
                  for (var i = 0, len = values.length; i < len; i++) {
                    values[i].then(resolve2, reject2);
                  }
                });
              };
              Promise2._immediateFn = typeof setImmediate === "function" && function(fn) {
                setImmediate(fn);
              } || function(fn) {
                setTimeoutFunc(fn, 0);
              };
              Promise2._unhandledRejectionFn = function _unhandledRejectionFn(err) {
                if (typeof console !== "undefined" && console) {
                  console.warn("Possible Unhandled Promise Rejection:", err);
                }
              };
              __webpack_exports__["a"] = Promise2;
            }).call(this, __webpack_require__(18).setImmediate);
          },
          /* 6 */
          /***/
          function(module3, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var src = __webpack_require__(5);
            var isFn = function(fn) {
              return typeof fn === "function";
            };
            var checkNativePromise = function(_a) {
              var Promise2 = (_a === void 0 ? window : _a).Promise;
              return Promise2 && Promise2.all && Promise2.race && Promise2.resolve && Promise2.reject && isFn(Promise2) && isFn(Promise2.all) && isFn(Promise2.race) && isFn(Promise2.resolve) && isFn(Promise2.reject);
            };
            var promiseFn = checkNativePromise() ? window.Promise : src[
              "a"
              /* default */
            ];
            var promise = promiseFn;
            var addListener = function(eventName, oldIeEventName, handler, element) {
              if (element === void 0) {
                element = window;
              }
              if (window.addEventListener) {
                element.addEventListener(eventName, handler, false);
              } else if (window.attachEvent) {
                element.attachEvent(oldIeEventName, handler);
              }
              return { eventName, handler, element };
            };
            var removeListener = function(eventName, handler, element) {
              if (element === void 0) {
                element = window;
              }
              if (element.removeEventListener) {
                element.removeEventListener(eventName, handler, false);
              } else if (element.detachEvent) {
                element.detachEvent("on" + eventName, handler);
              } else {
                element["on" + eventName] = null;
              }
            };
            var createEvent = function(eventName, payload) {
              if (typeof window.CustomEvent === "function") {
                return new window.CustomEvent(eventName, { detail: payload });
              } else if (typeof document.createEvent === "function") {
                var legacyCustomEvent = document.createEvent("CustomEvent");
                legacyCustomEvent.initCustomEvent(eventName, false, false, payload);
                return legacyCustomEvent;
              }
            };
            var isObjectEmpty = function(obj) {
              for (var prop in obj) {
                if (obj.hasOwnProperty(prop)) {
                  return false;
                }
              }
              return JSON.stringify(obj) === JSON.stringify({});
            };
            var indexOfArray = function(item, arr) {
              if (arr.indexOf) {
                return arr.indexOf(item);
              }
              for (var i = 0; i < arr.length; i++) {
                if (arr[i] === item) {
                  return i;
                }
              }
              return -1;
            };
            var shallowMerge = function(a, b) {
              for (var key in b) {
                if (b.hasOwnProperty(key)) {
                  a[key] = b[key];
                }
              }
              return a;
            };
            var getElementByClass = function(className, tagName, topLevelNode) {
              if (tagName === void 0) {
                tagName = "*";
              }
              if (topLevelNode === void 0) {
                topLevelNode = document;
              }
              if (typeof document.getElementsByClassName === "function") {
                return topLevelNode.getElementsByClassName(className);
              }
              var results = [];
              var re = new RegExp("(^| )" + className + "( |$)");
              var nodes = toArray(topLevelNode.getElementsByTagName(tagName));
              for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
                var node = nodes_1[_i];
                if (re.test(node.className)) {
                  results.push(node);
                }
              }
              return results;
            };
            var calcAspectRatio = function(imageEl, additionalWidth) {
              if (additionalWidth === void 0) {
                additionalWidth = 0;
              }
              var size = getNaturalDimensions(imageEl);
              return size.height !== 0 || size.width !== 0 ? (size.height / (size.width + additionalWidth) * 100).toFixed(2) : (9 / 16 * 100).toFixed(2);
            };
            var embed_helpers_log = function(message, logType) {
              if (logType === void 0) {
                logType = "log";
              }
              if (window.console && typeof window.console[logType] === "function") {
                console[logType](message);
              }
            };
            var find = function(array, test) {
              for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
                var item = array_1[_i];
                var res = test(item);
                if (res === true) {
                  return item;
                }
              }
            };
            var includes = function(array, itemToCheck) {
              return find(array, function(item) {
                return item === itemToCheck;
              });
            };
            var once = function(callback) {
              var expired = false;
              return function() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                  args[_i] = arguments[_i];
                }
                if (expired) {
                  return;
                }
                if (callback) {
                  callback.apply(void 0, args);
                }
                expired = true;
              };
            };
            var spaceOrEnterKeyPressEvent = function(callback) {
              return function(e) {
                if (e.keyCode === 32 || e.keyCode === 13) {
                  callback(e);
                }
              };
            };
            var escKeyPressEvent = function(callback) {
              return function(e) {
                if (e.keyCode === 27) {
                  callback(e);
                }
              };
            };
            var getCurrentScript = function() {
              return document.currentScript ? document.currentScript : find(toArray(document.getElementsByTagName("script")), function(script) {
                return script.src && (script.src.match("vidyard-embed-code.js") !== null || script.src.match(/v4(\.umd)?\.js/) !== null);
              });
            };
            var getNaturalDimensions = function(ele) {
              if (ele.naturalWidth) {
                return { width: ele.naturalWidth, height: ele.naturalHeight };
              }
              var img = new Image();
              img.src = ele.src;
              return { width: img.width, height: img.height };
            };
            var isArray = function(arg) {
              return Object.prototype.toString.call(arg) === "[object Array]";
            };
            var toArray = function(htmlCollection) {
              return Array.prototype.slice.call(htmlCollection);
            };
            var checkJSONParse = function(jsonString) {
              return new promise(function(res, rej) {
                try {
                  res(JSON.parse(jsonString));
                } catch (err) {
                  rej(err);
                }
              });
            };
            var xhrRequest = function(_a) {
              var endpoint = _a.endpoint, _b = _a.payload, payload = _b === void 0 ? {} : _b, _c = _a.method, method = _c === void 0 ? "GET" : _c;
              return new promise(function(res, rej) {
                var isXDomain = new XMLHttpRequest().withCredentials === void 0 && XDomainRequest;
                var xhr = isXDomain ? new XDomainRequest() : new XMLHttpRequest();
                xhr.open(method, endpoint);
                if (xhr instanceof XMLHttpRequest) {
                  xhr.setRequestHeader("Content-Type", "text/plain");
                }
                xhr.onerror = function(e) {
                  return rej(e);
                };
                xhr.onload = function() {
                  if (xhr instanceof XMLHttpRequest) {
                    if (Math.floor(xhr.status / 100) === 2) {
                      res(xhr.responseText);
                    } else {
                      rej();
                    }
                  } else {
                    res(xhr.responseText);
                  }
                };
                xhr.send(JSON.stringify(payload));
              });
            };
            var getFullscreenAPI = function() {
              var apiMap = [
                // Spec: https://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html
                ["requestFullscreen", "exitFullscreen", "fullscreenElement", "fullscreenchange"],
                // WebKit
                [
                  "webkitRequestFullscreen",
                  "webkitExitFullscreen",
                  "webkitFullscreenElement",
                  "webkitfullscreenchange"
                ],
                // Mozilla
                ["mozRequestFullScreen", "mozCancelFullScreen", "mozFullScreenElement", "mozfullscreenchange"],
                // Microsoft
                ["msRequestFullscreen", "msExitFullscreen", "msFullscreenElement", "MSFullscreenChange"]
              ];
              var browserAPI = [];
              var fullscreenAPI = {};
              for (var _i = 0, apiMap_1 = apiMap; _i < apiMap_1.length; _i++) {
                var browserMethods = apiMap_1[_i];
                if (browserMethods[1] in document) {
                  browserAPI = browserMethods;
                  break;
                }
              }
              if (browserAPI && browserAPI.length) {
                for (var i = 0; i < browserAPI.length; i++) {
                  fullscreenAPI[apiMap[0][i]] = browserAPI[i];
                }
                return fullscreenAPI;
              } else {
                return null;
              }
            };
            var dataSet = function(el) {
              var collection = {};
              var parseAttributeName = function(attr2) {
                return attr2.name.replace("data-", "");
              };
              for (var i = 0; i < el.attributes.length; i += 1) {
                var attr = el.attributes[i];
                if (attr.name.indexOf("data-") < 0) {
                  continue;
                }
                collection[parseAttributeName(attr)] = attr.value;
              }
              return collection;
            };
            var getQueryParam = function(name) {
              name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
              var regexString = "[\\?&]" + name + "=([^&#]*)";
              var regex = new RegExp(regexString);
              var results = regex.exec(window.location.search);
              if (results !== null) {
                return results[1];
              }
            };
            var parseNestedData = function(encodedData, type) {
              try {
                var nestedData_1 = JSON.parse(decodeURIComponent(encodedData));
                return Object.keys(nestedData_1).reduce(function(acc, key) {
                  acc[type + "[" + key + "]"] = nestedData_1[key];
                  return acc;
                }, {});
              } catch (e) {
                embed_helpers_log("Invalid " + type + " payload", "warn");
                return {};
              }
            };
            var parseVyData = function(data) {
              return Object.keys(data).reduce(function(acc, key) {
                if (key === "vydata") {
                  var parsedData_1 = parseNestedData(data[key], "vydata");
                  Object.keys(parsedData_1).forEach(function(parsedKey) {
                    acc[parsedKey] = parsedData_1[parsedKey];
                  });
                } else {
                  acc[key] = data[key];
                }
                return acc;
              }, {});
            };
            var toggleClass = function(element, classToToggle, forceBoolean) {
              var hasClass = function(ele, targetClass) {
                return ele.className.indexOf(targetClass) !== -1;
              };
              var addClass = function(ele, targetClass) {
                if (!hasClass(ele, targetClass)) {
                  ele.className = ele.className.trim() + " " + targetClass;
                }
              };
              var removeClass = function(ele, targetClass) {
                if (hasClass(ele, targetClass)) {
                  ele.className = ele.className.replace(targetClass, " ").trim();
                }
              };
              if (forceBoolean === true) {
                addClass(element, classToToggle);
              } else if (forceBoolean === false) {
                removeClass(element, classToToggle);
              } else if (hasClass(element, classToToggle)) {
                removeClass(element, classToToggle);
              } else {
                addClass(element, classToToggle);
              }
            };
            var VERSION = "4.3.12";
            var ERROR_ORIGIN_RE = /vidyard\.com\/embed\/v4/;
            var INTEGRATIONS_URL = "/integrations.js";
            var OVERLAY_FADE_TIME = 0.5;
            var PLAYLIST_WIDTH = 319;
            var SEO_DETAILS_URL = "/details.js";
            var STYLE_PATH = "/style.js";
            var dynamicPlaybackURL = function playbackURL() {
              var playbackURLOverride;
              return {
                setPlaybackURL: function(url) {
                  playbackURLOverride = url;
                  return playbackURLOverride;
                },
                getPlaybackURL: function() {
                  var currentScript = getCurrentScript();
                  var stagingPlaybackUrl = currentScript ? currentScript.getAttribute("data-playbackurl") : null;
                  return playbackURLOverride || window.VIDYARD_PLAYBACK_URL || stagingPlaybackUrl || "play.vidyard.com";
                }
              };
            }();
            var setPlaybackURL = dynamicPlaybackURL.setPlaybackURL;
            var getPlaybackURL = dynamicPlaybackURL.getPlaybackURL;
            var getBaseURL = function() {
              return "https://" + getPlaybackURL() + "/v4/";
            };
            var getErrorURL = function() {
              return "https://" + getPlaybackURL() + "/v4/error";
            };
            var send = function(message, targetOrigin, target) {
              if (!targetOrigin || !target) {
                return;
              }
              if (window.postMessage && target.contentWindow) {
                target.contentWindow.postMessage(JSON.stringify(message), targetOrigin);
              } else {
                if (message.event !== "associateVisitor") {
                  return;
                }
                var stringMessage = message.event + "," + message.data.type + "," + message.data.value + "|";
                var targetSrc = target.src;
                if (targetSrc.indexOf("#") === -1) {
                  targetSrc += "#";
                }
                targetSrc += stringMessage;
                target.src = targetSrc;
              }
            };
            var receive = function(callback) {
              return function(postMessage) {
                var data = parse(postMessage);
                if (!data) {
                  return;
                }
                callback(data);
              };
            };
            function parse(event) {
              if (typeof event.data !== "string" || event.data === "") {
                return;
              }
              try {
                var data = JSON.parse(event.data);
                var iframe = getElementByClass("vidyard-iframe-" + data.uuid, "iframe")[0];
                var contentWindow = iframe ? iframe.contentWindow : null;
                var sameSource = contentWindow === event.source;
                var validEvent = typeof data.event === "string";
                if (!sameSource || !validEvent) {
                  return;
                }
                return data;
              } catch (e) {
                embed_helpers_log("Invalid postMessage received", "warn");
                return;
              }
            }
            var cookieNames = [
              "pardot",
              "hubspotutk",
              "_mkto_trk",
              "vy_dreamforce",
              "eloqua"
            ];
            var messageNames = [
              "pardot",
              "hubspot",
              "marketo",
              "dreamforce",
              "eloqua"
            ];
            function IntegrationsWatcher() {
              var _this = this;
              var cookieCheckInterval = null;
              var loadedEloquaScript = false;
              var organizations = {};
              this.updatePlayer = function(player) {
                if (!player._tmpOrg || !player.iframe) {
                  return;
                }
                var orgId = player._tmpOrg.orgId;
                if (!organizations[orgId]) {
                  organizations[orgId] = {
                    foundIntegrations: {},
                    id: orgId,
                    // All integrations supported by this organization
                    integrations: player._tmpOrg,
                    // Store of cookie data found keyed by integration name
                    // Each integration has an externalIdentifier set with the tracking cookie/uuid if found
                    // as well as an object with which players have been sent the associateVisitor event
                    // e.g. {integration: {externalIdentifier: 'cookie_value', sentPlayers: ['player1.uuid']}}
                    // In DOM players associated with this organization
                    players: []
                  };
                }
                player.org = organizations[orgId];
                for (var _i = 0, _a = organizations[orgId].players; _i < _a.length; _i++) {
                  var currentPlayer = _a[_i];
                  if (currentPlayer.iframe === player.iframe) {
                    return;
                  }
                }
                organizations[orgId].players.push(player);
                var _b = player.org.integrations, eloqua = _b.eloqua, eloquaFirstPartyDomain = _b.eloquaFirstPartyDomain;
                if (eloqua) {
                  if (player.status !== null && player.status.consent) {
                    loadEloquaTrackingScript(eloqua, eloquaFirstPartyDomain);
                  } else {
                    player.on("status", function handleStatus() {
                      if (player.status.consent) {
                        loadEloquaTrackingScript(eloqua, eloquaFirstPartyDomain);
                        player.off("status", handleStatus);
                      }
                    });
                  }
                }
                checkForIntegrations();
              };
              this.safelyCommunicateIntegration = function(player, integration, externalIdentifier) {
                if (player.org !== void 0 && externalIdentifier !== void 0 && externalIdentifier !== null && !haveSentIntegrationToPlayer(player, integration) && communicateIntegration(player, integration, externalIdentifier)) {
                  player.org = setIntegrationSent(player.org, integration, player.uuid);
                }
              };
              this.addKnownVisitor = function(integrationName, visitorData, org) {
                if (!org) {
                  return;
                }
                for (var _i = 0, _a = org.players; _i < _a.length; _i++) {
                  var player = _a[_i];
                  communicateKnownVisitor(player, integrationName, visitorData);
                }
              };
              this.getCookie = function(integration, organization) {
                var cookies = document.cookie.split(";");
                if (integration === "eloqua" && typeof window.GetElqCustomerGUID === "function") {
                  return window.GetElqCustomerGUID();
                }
                var cookieName = alterDynamicCookieName(cookieNames[messageNames.indexOf(integration)], organization);
                for (var _i = 0, cookies_1 = cookies; _i < cookies_1.length; _i++) {
                  var currentCookie = cookies_1[_i];
                  var equalIndex = currentCookie.indexOf("=");
                  var foundName = currentCookie.substr(0, equalIndex).replace(/^\s+|\s+$/g, "");
                  var foundId = currentCookie.substr(equalIndex + 1);
                  if (foundName === cookieName) {
                    return decodeURIComponent(foundId);
                  }
                }
              };
              var haveSentIntegrationToPlayer = function(player, integration) {
                return player.org && player.org.foundIntegrations && player.org.foundIntegrations[integration] && player.org.foundIntegrations[integration].sentPlayers && indexOfArray(player.uuid, player.org.foundIntegrations[integration].sentPlayers) !== -1;
              };
              var setupFoundIntegration = function(org, integration) {
                if (!org.foundIntegrations[integration]) {
                  org.foundIntegrations[integration] = {
                    externalIdentifier: null,
                    sentPlayers: []
                  };
                }
                return org;
              };
              var setIntegrationSent = function(org, integration, playerUuid) {
                org = setupFoundIntegration(org, integration);
                org.foundIntegrations[integration].sentPlayers.push(playerUuid);
                return org;
              };
              var setIntegrationIdentifier = function(org, integration, externalIdentifier) {
                org = setupFoundIntegration(org, integration);
                org.foundIntegrations[integration].externalIdentifier = externalIdentifier;
                return org;
              };
              var communicateIntegration = function(player, integration, externalIdentifier) {
                if (!player.ready()) {
                  return false;
                }
                var message = {
                  data: { type: integration, value: externalIdentifier },
                  event: "associateVisitor",
                  uuid: player.uuid
                };
                embed_helpers_log("IntegrationsWatcher.communicateIntegration " + message, "debug");
                send(message, "https://" + getPlaybackURL(), player.iframe);
                return true;
              };
              var messagePlayersFoundIntegration = function(players, integration, externalIdentifier) {
                if (players === void 0 || externalIdentifier === void 0 || externalIdentifier === null) {
                  return;
                }
                for (var _i = 0, players_1 = players; _i < players_1.length; _i++) {
                  var player = players_1[_i];
                  _this.safelyCommunicateIntegration(player, integration, externalIdentifier);
                }
              };
              var sendKnownVisitor = function(player, leadType, leadData) {
                var message = {
                  data: { type: leadType, value: leadData },
                  event: "identifyVisitor",
                  uuid: player.uuid
                };
                send(message, "https://" + getPlaybackURL(), player.iframe);
              };
              var communicateKnownVisitor = function(player, leadType, leadData) {
                if (!player.ready()) {
                  player.on("ready", function() {
                    sendKnownVisitor(player, leadType, leadData);
                  });
                } else {
                  sendKnownVisitor(player, leadType, leadData);
                }
              };
              var checkForIntegrations = function() {
                for (var _i = 0, messageNames_1 = messageNames; _i < messageNames_1.length; _i++) {
                  var integration = messageNames_1[_i];
                  for (var orgKey in organizations) {
                    if (organizations.hasOwnProperty(orgKey)) {
                      var currentOrganization = organizations[orgKey];
                      if (!currentOrganization.integrations[integration]) {
                        continue;
                      }
                      var cookieValue = _this.getCookie(integration, currentOrganization);
                      if (!cookieValue) {
                        continue;
                      }
                      cookieValue = parseCookieValue(integration, cookieValue, currentOrganization);
                      if (!cookieValue) {
                        continue;
                      }
                      currentOrganization = setIntegrationIdentifier(currentOrganization, integration, cookieValue);
                      messagePlayersFoundIntegration(currentOrganization.players, integration, cookieValue);
                    }
                  }
                }
              };
              var alterDynamicCookieName = function(cookieName, organization) {
                if (cookieName === "pardot" && organization && organization.integrations.pardot) {
                  return "visitor_id" + organization.integrations.pardot;
                }
                return cookieName;
              };
              var parseCookieValue = function(msgName, cookieValue, org) {
                if (msgName === "marketo") {
                  if (!org.integrations.marketo || cookieValue.toLowerCase().indexOf(org.integrations.marketo.toLowerCase()) === -1) {
                    return null;
                  }
                  cookieValue = encodeURIComponent(cookieValue);
                }
                return cookieValue;
              };
              var loadEloquaTrackingScript = function(siteId, firstPartyDomain) {
                if (loadedEloquaScript) {
                  return;
                }
                loadedEloquaScript = true;
                var createEloquaScriptNode = function() {
                  if (document.getElementById("vidyard-eloqua-include")) {
                    return;
                  }
                  window._elqQ = window._elqQ || [];
                  window._elqQ.push(["elqSetSiteId", siteId]);
                  if (firstPartyDomain) {
                    window._elqQ.push(["elqUseFirstPartyCookie", firstPartyDomain]);
                  }
                  window._elqQ.push(["elqTrackPageView"]);
                  window._elqQ.push(["elqGetCustomerGUID"]);
                  var eloquaScript = document.createElement("script");
                  eloquaScript.id = "vidyard-eloqua-include";
                  eloquaScript.type = "text/javascript";
                  eloquaScript.async = true;
                  eloquaScript.src = "https://img.en25.com/i/elqCfg.min.js";
                  var firstScript = document.getElementsByTagName("script")[0];
                  firstScript.parentNode.insertBefore(eloquaScript, firstScript);
                };
                if (document.readyState === "complete") {
                  createEloquaScriptNode();
                } else {
                  addListener("DOMContentLoaded", "onload", createEloquaScriptNode);
                }
              };
              cookieCheckInterval = setInterval(function() {
                checkForIntegrations();
              }, 1e3);
            }
            var readyCallback = function() {
              if (window.onVidyardAPI && typeof window.onVidyardAPI === "function") {
                window.onVidyardAPI(window.VidyardV4);
              }
            };
            var readyEvent = function() {
              document.dispatchEvent(createEvent("onVidyardAPI", window.VidyardV4));
            };
            var dispatchReady = once(function() {
              readyCallback();
              readyEvent();
            });
            var dispatch_ready = dispatchReady;
            var build = __webpack_require__(3);
            var build_default = /* @__PURE__ */ __webpack_require__.n(build);
            var logger = new build_default.a({
              emit: !!window.location.search.match("vydebug=1"),
              logger: function(message) {
                return embed_helpers_log(message, "info");
              }
            });
            var debug_currentScript = getCurrentScript();
            if (debug_currentScript) {
              logger.info("vidyardEmbed V" + VERSION + " loaded from " + debug_currentScript.src);
              logger.info("data-playbackurl=" + debug_currentScript.getAttribute("data-playbackurl"));
            }
            logger.info("userAgent " + window.navigator.userAgent);
            logger.info("cookies " + navigator.cookieEnabled);
            if (window.performance && window.performance.timing && window.performance.timing.navigationStart) {
              logger.info("Script load time " + (Date.now() - window.performance.timing.navigationStart));
            }
            var debug = { logger, getPlaybackURL, setPlaybackURL, version: VERSION };
            var api_debug = debug;
            function addReadyListener(cb, uuid) {
              var playerReadyListeners = window.VidyardV4.playerReadyListeners;
              playerReadyListeners[uuid] = playerReadyListeners[uuid] || [];
              playerReadyListeners[uuid].push(cb);
              for (var _i = 0, _a = window.VidyardV4.players; _i < _a.length; _i++) {
                var currentPlayer = _a[_i];
                if (uuid !== void 0 && currentPlayer.uuid !== uuid) {
                  continue;
                }
                currentPlayer.on("ready", cb);
              }
            }
            function processReadyListeners(player) {
              var playerReadyListeners = window.VidyardV4.playerReadyListeners;
              var uuid = player.uuid;
              var log = logger.setLevel(player.uuid);
              playerReadyListeners[uuid] = playerReadyListeners[uuid] || [];
              var callbacks = playerReadyListeners[uuid].concat(playerReadyListeners[void 0]);
              Object.keys(callbacks).forEach(function(k) {
                var callback = callbacks[k];
                player.on("ready", callback);
                log("attaching ready callbacks");
              });
            }
            var allowFeaturePolicy = function() {
              var features = [
                "autoplay",
                "fullscreen",
                "picture-in-picture",
                "camera",
                "microphone",
                "display-capture"
              ];
              return features.join("; ");
            };
            var createIframe = function(dataParams, sizing) {
              var maxSizeDiv = function(children) {
                return dataParams.type === "inline" ? '<div class="vidyard-inner-container-' + dataParams.uuid + '" style="position: absolute;height: 100%; width: 100%; ' + (sizing.maxWidth ? "max-width: " + sizing.maxWidth + "px; " : "") + (sizing.maxHeight ? "max-height: " + sizing.maxHeight + "px; " : "") + '"> ' + children + "</div> " : children;
              };
              return '<div class="vidyard-div-' + dataParams.uuid + '" role="region" aria-label="Vidyard media player" style="position: absolute; padding-bottom: ' + sizing.ratio + '%; height: 0; overflow: hidden; max-width: 100%; ">' + maxSizeDiv('<iframe allow="' + allowFeaturePolicy() + '"allowfullscreen allowtransparency="true" referrerpolicy="no-referrer-when-downgrade" class="vidyard-iframe-' + dataParams.uuid + '" frameborder=0 height="100%" width="100%" scrolling=no src="https://' + getPlaybackURL() + "/" + dataParams.uuid + dataParams.toQueryString() + '" title="Vidyard video player" style="opacity: 0; background-color: transparent; position: absolute; top: 0; left: 0;"></iframe>') + "</div>";
            };
            var createJsonLD = function(data) {
              var playerDetailsScriptTag = document.createElement("script");
              playerDetailsScriptTag.type = "application/ld+json";
              playerDetailsScriptTag.text = JSON.stringify(data);
              return playerDetailsScriptTag;
            };
            var getStyle = function(uuid) {
              return new promise(function(res, rej) {
                return request({
                  error: rej,
                  success: res,
                  url: "" + getBaseURL() + uuid + STYLE_PATH,
                  uuid: "style_" + uuid
                });
              });
            };
            var getIntegrations = function(uuid) {
              return new promise(function(res, rej) {
                return request({
                  error: rej,
                  success: res,
                  url: "" + getBaseURL() + uuid + INTEGRATIONS_URL,
                  uuid: "integrations_" + uuid
                });
              });
            };
            var getSEO = function(uuid) {
              return new promise(function(res, rej) {
                return request({
                  error: rej,
                  success: res,
                  url: "" + getBaseURL() + uuid + SEO_DETAILS_URL,
                  uuid: "details_" + uuid
                });
              });
            };
            var getMarketoLead = function(uuid, marketoCookie) {
              return new promise(function(res, rej) {
                var cookie = encodeURIComponent(marketoCookie);
                var contactUrl = "" + getBaseURL() + uuid + "/contact/" + cookie + "/marketoContact.js";
                request({
                  error: rej,
                  success: res,
                  url: contactUrl,
                  uuid: "marketoContact_" + uuid
                });
              });
            };
            var createJSONPTag = function(_a) {
              var error = _a.error, url = _a.url, requestUuid = _a.requestUuid;
              var script = document.createElement("script");
              script.type = "application/javascript";
              script.onerror = error;
              script.src = url + "?callback=window.VidyardV4.jsonp." + requestUuid + ".done";
              script.setAttribute("data-playbackurl", getPlaybackURL());
              document.body.appendChild(script);
              return script;
            };
            var jsonpRequests = {};
            var request = function(_a) {
              var url = _a.url, uuid = _a.uuid, success = _a.success, error = _a.error;
              var requestUuid = uuid.replace(/-/g, "");
              var script = createJSONPTag({ error, url, requestUuid });
              var onRes = once(function(data) {
                success(data);
                script.parentNode.removeChild(script);
              });
              jsonpRequests[requestUuid] = jsonpRequests[requestUuid] || [];
              jsonpRequests[requestUuid].push(onRes);
              window.VidyardV4.jsonp[requestUuid] = {
                done: function(data) {
                  jsonpRequests[requestUuid].forEach(function(cb) {
                    return cb(data);
                  });
                }
              };
            };
            var messages = {
              errors: {
                placeholder: "Cannot render the player, check the placeholder Image"
              }
            };
            var __rest = function(s, e) {
              var t = {};
              for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                  t[p] = s[p];
              if (s != null && typeof Object.getOwnPropertySymbols === "function") {
                for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)
                  if (e.indexOf(p[i]) < 0)
                    t[p[i]] = s[p[i]];
              }
              return t;
            };
            var loadPlaceholder = function(img) {
              if (!img) {
                return promise.reject(new Error(messages.errors.placeholder));
              }
              var _a = getNaturalDimensions(img), width = _a.width, height = _a.height;
              var uuid = img.getAttribute("data-uuid");
              if (img.src === "" || !uuid) {
                return promise.reject(new Error(messages.errors.placeholder));
              }
              if (img.complete && (width === 0 || height === 0)) {
                return promise.reject(new Error(messages.errors.placeholder));
              }
              if (img.complete) {
                return promise.resolve(img);
              } else {
                return new promise(function(res, rej) {
                  img.onload = function() {
                    return res(img);
                  };
                  img.onerror = function() {
                    return rej(img);
                  };
                });
              }
            };
            var createPlaceholder = function(_a) {
              if (_a === void 0) {
                _a = {};
              }
              var uuid = _a.uuid, container = _a.container, _b = _a.type, type = _b === void 0 ? "inline" : _b, _c = _a.aspect, aspect = _c === void 0 ? "landscape" : _c, other = __rest(_a, ["uuid", "container", "type", "aspect"]);
              if (!uuid || !container) {
                return;
              }
              logger.setLevel("placeholder")("creating placeholder image");
              var image = document.createElement("img");
              var width = other.width ? other.width + "px" : "100%";
              var height = other.height ? other.height + "px" : "100%";
              var style = "\n    display: block;\n    margin: 0 auto;\n    max-height: " + height + ";\n    max-width: " + width + ";\n    opacity: 0;\n  ";
              image.src = "https://" + getPlaybackURL() + "/" + uuid + ".jpg";
              image.className = "vidyard-player-embed";
              image.setAttribute("style", style);
              image.setAttribute("data-uuid", uuid);
              image.setAttribute("data-type", type);
              Object.keys(other).forEach(function(k) {
                return image.setAttribute("data-" + k, other[k]);
              });
              return container.appendChild(image);
            };
            var loadServerThumbnail = function(uuid) {
              var image = document.createElement("img");
              image.setAttribute("data-uuid", uuid);
              image.src = "//" + getPlaybackURL() + "/" + uuid + ".jpg";
              return loadPlaceholder(image);
            };
            var injectInlineElements = function(_a) {
              var dataParams = _a.dataParams, player = _a.player;
              var log = logger.setLevel(dataParams.uuid);
              log("injecting inline embed");
              var updateAspectRatio = function() {
                if (player.placeholder.src !== "//" + getPlaybackURL() + "/" + player.uuid + ".jpg") {
                  return loadServerThumbnail(player.uuid).then(calcAspectRatio).catch(function() {
                    return false;
                  });
                }
                return promise.resolve(false);
              };
              var sizing = {
                maxHeight: dataParams.height ? parseInt(dataParams.height, 10).toString() : null,
                maxWidth: dataParams.width ? parseInt(dataParams.width, 10).toString() : null,
                ratio: calcAspectRatio(player.placeholder)
              };
              player.container.innerHTML = createIframe(dataParams, sizing);
              var iframe = player.container.getElementsByTagName("iframe")[0];
              player.iframe = iframe;
              var iframeLoadedPromise = new promise(function(res) {
                addListener("load", "onload", res, iframe);
              });
              var playerReadyPromise = new promise(function(res) {
                player.on("ready", res);
              });
              player.on("sidePlaylistOpen", function() {
                handleResize();
              });
              promise.race([iframeLoadedPromise, playerReadyPromise]).then(function() {
                log("player or iFrame is ready");
                updateAspectRatio().then(function(newAspectRatio) {
                  if (newAspectRatio) {
                    iframe.parentElement.parentElement.style.paddingBottom = newAspectRatio + "%";
                  }
                });
                var innerContainer = player.container.getElementsByClassName("vidyard-inner-container-" + player.uuid)[0];
                player.placeholder.parentElement.removeChild(player.placeholder);
                toggleClass(player.placeholder, "inserted", true);
                innerContainer.appendChild(player.placeholder);
                iframe.parentElement.parentElement.style.position = "relative";
                iframe.style.opacity = "1";
              });
              iframeLoadedPromise.then(function() {
                player.placeholder.style.display = "none";
                iframe.parentElement.parentElement.style.backgroundColor = "transparent";
              });
              player.on("metadata", function updateInlineIframeTitle(args) {
                var metadata = args[0];
                iframe.title = metadata.name;
                player.off("metadata", updateInlineIframeTitle);
              });
              function handleResize() {
                var aboveBreakpoint = player.container.clientWidth >= PLAYLIST_WIDTH * 2;
                toggleClass(player.container, "playlist-open", aboveBreakpoint);
              }
              log("getStyle sent");
              getStyle(player.uuid).then(
                // pl is the "playlist always open" setting from the Dashboard.
                function(data) {
                  log("getStyle received: " + JSON.stringify(data));
                  var playlistAlwaysOpen = data.pl === 1 && dataParams.playlist_always_open !== "0" || dataParams.playlist_always_open === "1";
                  if (playlistAlwaysOpen) {
                    player.iframe.parentElement.setAttribute("data-pl", "true");
                    addListener("resize", "onresize", handleResize);
                    handleResize();
                  } else {
                    player.iframe.parentElement.setAttribute("data-pl", "false");
                  }
                }
              ).catch(function(e) {
                log("getStyle failed, likely a network error");
              });
            };
            var inline_player = injectInlineElements;
            var ariaHideChildElements = function(element) {
              if (element === void 0) {
                element = document.body;
              }
              for (var _i = 0, _a = Array.from(element.children); _i < _a.length; _i++) {
                var el = _a[_i];
                if (el.hasAttribute("aria-hidden")) {
                  el.setAttribute("data-vy-keep-hidden", el.getAttribute("aria-hidden"));
                }
                el.setAttribute("aria-hidden", "true");
              }
            };
            var undoAriaHideChildElements = function(element) {
              if (element === void 0) {
                element = document.body;
              }
              for (var _i = 0, _a = Array.from(element.children); _i < _a.length; _i++) {
                var el = _a[_i];
                if (el.getAttribute("data-vy-keep-hidden")) {
                  el.setAttribute("aria-hidden", el.getAttribute("data-vy-keep-hidden"));
                } else {
                  el.removeAttribute("aria-hidden");
                }
                el.removeAttribute("data-vy-keep-hidden");
              }
            };
            var user_agent_checker = {
              ios: function() {
                return /ipad|iphone|ipod/i.test(navigator.userAgent);
              }
            };
            var array_toArray = function toArray2(a) {
              var ret = Array(a.length);
              for (var i = 0; i < a.length; ++i) {
                ret[i] = a[i];
              }
              return ret;
            };
            var arrayFind = function arrayFind2(array, search) {
              return array.filter(function(a) {
                return a === search;
              })[0];
            };
            var asArray = function asArray2(a) {
              return Array.isArray(a) ? a : [a];
            };
            var FOCUS_GROUP = "data-focus-lock";
            var FOCUS_DISABLED = "data-focus-lock-disabled";
            var FOCUS_ALLOW = "data-no-focus-lock";
            var FOCUS_AUTO = "data-autofocus-inside";
            var focusIsHidden_focusIsHidden = function focusIsHidden() {
              return document && array_toArray(document.querySelectorAll("[" + FOCUS_ALLOW + "]")).some(function(node) {
                return node.contains(document.activeElement);
              });
            };
            var es2015_focusIsHidden = focusIsHidden_focusIsHidden;
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
              return typeof obj;
            } : function(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            var filterNested = function filterNested2(nodes) {
              var l = nodes.length;
              for (var i = 0; i < l; i += 1) {
                var _loop = function _loop2(j2) {
                  if (i !== j2) {
                    if (nodes[i].contains(nodes[j2])) {
                      return {
                        v: filterNested2(nodes.filter(function(x) {
                          return x !== nodes[j2];
                        }))
                      };
                    }
                  }
                };
                for (var j = 0; j < l; j += 1) {
                  var _ret = _loop(j);
                  if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object")
                    return _ret.v;
                }
              }
              return nodes;
            };
            var getTopParent = function getTopParent2(node) {
              return node.parentNode ? getTopParent2(node.parentNode) : node;
            };
            var all_affected_getAllAffectedNodes = function getAllAffectedNodes(node) {
              var nodes = asArray(node);
              return nodes.filter(Boolean).reduce(function(acc, currentNode) {
                var group = currentNode.getAttribute(FOCUS_GROUP);
                acc.push.apply(acc, group ? filterNested(array_toArray(getTopParent(currentNode).querySelectorAll("[" + FOCUS_GROUP + '="' + group + '"]:not([' + FOCUS_DISABLED + '="disabled"])'))) : [currentNode]);
                return acc;
              }, []);
            };
            var all_affected = all_affected_getAllAffectedNodes;
            var focusInFrame = function focusInFrame2(frame) {
              return frame === document.activeElement;
            };
            var focusInside_focusInsideIframe = function focusInsideIframe(topNode) {
              return !!arrayFind(array_toArray(topNode.querySelectorAll("iframe")), focusInFrame);
            };
            var focusInside_focusInside = function focusInside(topNode) {
              var activeElement = document && document.activeElement;
              if (!activeElement || activeElement.dataset && activeElement.dataset.focusGuard) {
                return false;
              }
              return all_affected(topNode).reduce(function(result, node) {
                return result || node.contains(activeElement) || focusInside_focusInsideIframe(node);
              }, false);
            };
            var es2015_focusInside = focusInside_focusInside;
            var tabSort = function tabSort2(a, b) {
              var tabDiff = a.tabIndex - b.tabIndex;
              var indexDiff = a.index - b.index;
              if (tabDiff) {
                if (!a.tabIndex)
                  return 1;
                if (!b.tabIndex)
                  return -1;
              }
              return tabDiff || indexDiff;
            };
            var tabOrder_orderByTabIndex = function orderByTabIndex(nodes, filterNegative, keepGuards) {
              return array_toArray(nodes).map(function(node, index) {
                return {
                  node,
                  index,
                  tabIndex: keepGuards && node.tabIndex === -1 ? (node.dataset || {}).focusGuard ? 0 : -1 : node.tabIndex
                };
              }).filter(function(data) {
                return !filterNegative || data.tabIndex >= 0;
              }).sort(tabSort);
            };
            var tabbables = ["button:enabled:not([readonly])", "select:enabled:not([readonly])", "textarea:enabled:not([readonly])", "input:enabled:not([readonly])", "a[href]", "area[href]", "iframe", "object", "embed", "[tabindex]", "[contenteditable]", "[autofocus]"];
            var queryTabbables = tabbables.join(",");
            var queryGuardTabbables = queryTabbables + ", [data-focus-guard]";
            var tabUtils_getFocusables = function getFocusables(parents, withGuards) {
              return parents.reduce(function(acc, parent) {
                return acc.concat(
                  // add all tabbables inside
                  array_toArray(parent.querySelectorAll(withGuards ? queryGuardTabbables : queryTabbables)),
                  // add if node is tabble itself
                  parent.parentNode ? array_toArray(parent.parentNode.querySelectorAll(tabbables.join(","))).filter(function(node) {
                    return node === parent;
                  }) : []
                );
              }, []);
            };
            var tabUtils_getParentAutofocusables = function getParentAutofocusables(parent) {
              var parentFocus = parent.querySelectorAll("[" + FOCUS_AUTO + "]");
              return array_toArray(parentFocus).map(function(node) {
                return tabUtils_getFocusables([node]);
              }).reduce(function(acc, nodes) {
                return acc.concat(nodes);
              }, []);
            };
            var isElementHidden = function isElementHidden2(computedStyle) {
              if (!computedStyle || !computedStyle.getPropertyValue) {
                return false;
              }
              return computedStyle.getPropertyValue("display") === "none" || computedStyle.getPropertyValue("visibility") === "hidden";
            };
            var isVisible = function isVisible2(node) {
              return !node || node === document || node.nodeType === Node.DOCUMENT_NODE || !isElementHidden(window.getComputedStyle(node, null)) && isVisible2(node.parentNode);
            };
            var notHiddenInput = function notHiddenInput2(node) {
              return !((node.tagName === "INPUT" || node.tagName === "BUTTON") && (node.type === "hidden" || node.disabled));
            };
            var getParents = function getParents2(node) {
              var parents = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
              parents.push(node);
              if (node.parentNode) {
                getParents2(node.parentNode, parents);
              }
              return parents;
            };
            var getCommonParent = function getCommonParent2(nodea, nodeb) {
              var parentsA = getParents(nodea);
              var parentsB = getParents(nodeb);
              for (var i = 0; i < parentsA.length; i += 1) {
                var currentParent = parentsA[i];
                if (parentsB.indexOf(currentParent) >= 0) {
                  return currentParent;
                }
              }
              return false;
            };
            var DOMutils_filterFocusable = function filterFocusable(nodes) {
              return array_toArray(nodes).filter(function(node) {
                return isVisible(node);
              }).filter(function(node) {
                return notHiddenInput(node);
              });
            };
            var DOMutils_getTabbableNodes = function getTabbableNodes(topNodes, withGuards) {
              return tabOrder_orderByTabIndex(DOMutils_filterFocusable(tabUtils_getFocusables(topNodes, withGuards)), true, withGuards);
            };
            var DOMutils_getAllTabbableNodes = function getAllTabbableNodes(topNodes) {
              return tabOrder_orderByTabIndex(DOMutils_filterFocusable(tabUtils_getFocusables(topNodes)), false);
            };
            var DOMutils_parentAutofocusables = function parentAutofocusables(topNode) {
              return DOMutils_filterFocusable(tabUtils_getParentAutofocusables(topNode));
            };
            var isRadio = function isRadio2(node) {
              return node.tagName === "INPUT" && node.type === "radio";
            };
            var findSelectedRadio = function findSelectedRadio2(node, nodes) {
              return nodes.filter(isRadio).filter(function(el) {
                return el.name === node.name;
              }).filter(function(el) {
                return el.checked;
              })[0] || node;
            };
            var pickFirstFocus = function pickFirstFocus2(nodes) {
              if (nodes[0] && nodes.length > 1) {
                if (isRadio(nodes[0]) && nodes[0].name) {
                  return findSelectedRadio(nodes[0], nodes);
                }
              }
              return nodes[0];
            };
            var pickFocusable = function pickFocusable2(nodes, index) {
              if (nodes.length > 1) {
                if (isRadio(nodes[index]) && nodes[index].name) {
                  return nodes.indexOf(findSelectedRadio(nodes[index], nodes));
                }
              }
              return index;
            };
            var utils_firstFocus = pickFirstFocus;
            var findAutoFocused = function findAutoFocused2(autoFocusables) {
              return function(node) {
                return !!node.autofocus || node.dataset && !!node.dataset.autofocus || autoFocusables.indexOf(node) >= 0;
              };
            };
            var isGuard = function isGuard2(node) {
              return node && node.dataset && node.dataset.focusGuard;
            };
            var notAGuard = function notAGuard2(node) {
              return !isGuard(node);
            };
            var focusMerge_newFocus = function newFocus(innerNodes, outerNodes, activeElement, lastNode, autoFocused) {
              var cnt = innerNodes.length;
              var firstFocus = innerNodes[0];
              var lastFocus = innerNodes[cnt - 1];
              var isOnGuard = isGuard(activeElement);
              if (innerNodes.indexOf(activeElement) >= 0) {
                return void 0;
              }
              var activeIndex = outerNodes.indexOf(activeElement);
              var lastIndex = outerNodes.indexOf(lastNode || activeIndex);
              var lastNodeInside = innerNodes.indexOf(lastNode);
              var indexDiff = activeIndex - lastIndex;
              var firstNodeIndex = outerNodes.indexOf(firstFocus);
              var lastNodeIndex = outerNodes.indexOf(lastFocus);
              var returnFirstNode = pickFocusable(innerNodes, 0);
              var returnLastNode = pickFocusable(innerNodes, cnt - 1);
              if (activeIndex === -1 || lastNodeInside === -1) {
                return innerNodes.indexOf(autoFocused && autoFocused.length ? utils_firstFocus(autoFocused) : utils_firstFocus(innerNodes));
              }
              if (!indexDiff && lastNodeInside >= 0) {
                return lastNodeInside;
              }
              if (activeIndex <= firstNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
                return returnLastNode;
              }
              if (activeIndex >= firstNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
                return returnFirstNode;
              }
              if (indexDiff && Math.abs(indexDiff) > 1) {
                return lastNodeInside;
              }
              if (activeIndex <= firstNodeIndex) {
                return returnLastNode;
              }
              if (activeIndex > lastNodeIndex) {
                return returnFirstNode;
              }
              if (indexDiff) {
                if (Math.abs(indexDiff) > 1) {
                  return lastNodeInside;
                }
                return (cnt + lastNodeInside + indexDiff) % cnt;
              }
              return void 0;
            };
            var focusMerge_getTopCommonParent = function getTopCommonParent(baseActiveElement, leftEntry, rightEntries) {
              var activeElements = asArray(baseActiveElement);
              var leftEntries = asArray(leftEntry);
              var activeElement = activeElements[0];
              var topCommon = null;
              leftEntries.filter(Boolean).forEach(function(entry) {
                topCommon = getCommonParent(topCommon || entry, entry) || topCommon;
                rightEntries.filter(Boolean).forEach(function(subEntry) {
                  var common = getCommonParent(activeElement, subEntry);
                  if (common) {
                    if (!topCommon || common.contains(topCommon)) {
                      topCommon = common;
                    } else {
                      topCommon = getCommonParent(common, topCommon);
                    }
                  }
                });
              });
              return topCommon;
            };
            var focusMerge_allParentAutofocusables = function allParentAutofocusables(entries) {
              return entries.reduce(function(acc, node) {
                return acc.concat(DOMutils_parentAutofocusables(node));
              }, []);
            };
            var reorderNodes = function reorderNodes2(srcNodes, dstNodes) {
              var remap = /* @__PURE__ */ new Map();
              dstNodes.forEach(function(entity) {
                return remap.set(entity.node, entity);
              });
              return srcNodes.map(function(node) {
                return remap.get(node);
              }).filter(Boolean);
            };
            var focusMerge_getFocusabledIn = function getFocusabledIn(topNode) {
              var entries = all_affected(topNode).filter(notAGuard);
              var commonParent = focusMerge_getTopCommonParent(topNode, topNode, entries);
              var outerNodes = DOMutils_getTabbableNodes([commonParent], true);
              var innerElements = DOMutils_getTabbableNodes(entries).filter(function(_ref) {
                var node = _ref.node;
                return notAGuard(node);
              }).map(function(_ref2) {
                var node = _ref2.node;
                return node;
              });
              return outerNodes.map(function(_ref3) {
                var node = _ref3.node, index = _ref3.index;
                return {
                  node,
                  index,
                  lockItem: innerElements.indexOf(node) >= 0,
                  guard: isGuard(node)
                };
              });
            };
            var focusMerge_getFocusMerge = function getFocusMerge(topNode, lastNode) {
              var activeElement = document && document.activeElement;
              var entries = all_affected(topNode).filter(notAGuard);
              var commonParent = focusMerge_getTopCommonParent(activeElement || topNode, topNode, entries);
              var innerElements = DOMutils_getTabbableNodes(entries).filter(function(_ref4) {
                var node = _ref4.node;
                return notAGuard(node);
              });
              if (!innerElements[0]) {
                innerElements = DOMutils_getAllTabbableNodes(entries).filter(function(_ref5) {
                  var node = _ref5.node;
                  return notAGuard(node);
                });
                if (!innerElements[0]) {
                  return void 0;
                }
              }
              var outerNodes = DOMutils_getTabbableNodes([commonParent]).map(function(_ref6) {
                var node = _ref6.node;
                return node;
              });
              var orderedInnerElements = reorderNodes(outerNodes, innerElements);
              var innerNodes = orderedInnerElements.map(function(_ref7) {
                var node = _ref7.node;
                return node;
              });
              var newId = focusMerge_newFocus(innerNodes, outerNodes, activeElement, lastNode, innerNodes.filter(findAutoFocused(focusMerge_allParentAutofocusables(entries))));
              if (newId === void 0) {
                return newId;
              }
              return orderedInnerElements[newId];
            };
            var focusMerge = focusMerge_getFocusMerge;
            var focusOn = function focusOn2(target) {
              target.focus();
              if (target.contentWindow) {
                target.contentWindow.focus();
              }
            };
            var guardCount = 0;
            var lockDisabled = false;
            var setFocus = function(topNode, lastNode) {
              var focusable = focusMerge(topNode, lastNode);
              if (lockDisabled) {
                return;
              }
              if (focusable) {
                if (guardCount > 2) {
                  console.error("FocusLock: focus-fighting detected. Only one focus management system could be active. See https://github.com/theKashey/focus-lock/#focus-fighting");
                  lockDisabled = true;
                  setTimeout(function() {
                    lockDisabled = false;
                  }, 1);
                  return;
                }
                guardCount++;
                focusOn(focusable.node);
                guardCount--;
              }
            };
            var es2015 = setFocus;
            var lastActiveTrap = 0;
            var lastActiveFocus = null;
            var focusOnBody = function focusOnBody2() {
              return document && document.activeElement === document.body;
            };
            var index_esm_isFreeFocus = function isFreeFocus() {
              return focusOnBody() || es2015_focusIsHidden();
            };
            var index_esm_activateTrap = function activateTrap() {
              var result = false;
              if (lastActiveTrap) {
                var observed = lastActiveTrap;
                if (!index_esm_isFreeFocus()) {
                  if (observed && !es2015_focusInside(observed)) {
                    result = es2015(observed, lastActiveFocus);
                  }
                  lastActiveFocus = document.activeElement;
                }
              }
              return result;
            };
            var reducePropsToState = function reducePropsToState2(propsList) {
              return propsList.filter(function(node) {
                return node;
              }).slice(-1)[0];
            };
            var handleStateChangeOnClient = function handleStateChangeOnClient2(trap) {
              lastActiveTrap = trap;
              if (trap) {
                index_esm_activateTrap();
              }
            };
            var instances = [];
            var emitChange = function emitChange2(event) {
              if (handleStateChangeOnClient(reducePropsToState(instances))) {
                event && event.preventDefault();
                return true;
              }
              return false;
            };
            var attachHandler = function attachHandler2() {
              document.addEventListener("focusin", emitChange);
            };
            var detachHandler = function detachHandler2() {
              document.removeEventListener("focusin", emitChange);
            };
            var focusLock = {
              on: function on(domNode) {
                if (instances.length === 0) {
                  attachHandler();
                }
                if (instances.indexOf(domNode) < 0) {
                  instances.push(domNode);
                  emitChange();
                }
              },
              off: function off(domNode) {
                instances = instances.filter(function(node) {
                  return node !== domNode;
                });
                emitChange();
                if (instances.length === 0) {
                  detachHandler();
                }
              }
            };
            var index_esm = focusLock;
            var makeup_screenreader_trap = __webpack_require__(1);
            var makeup_screenreader_trap_default = /* @__PURE__ */ __webpack_require__.n(makeup_screenreader_trap);
            function show(iframeString, thumbnailContainer, overlayZindex) {
              var container = generateLightboxContainer(iframeString);
              var lightbox = generateLightboxHTML(overlayZindex);
              var lightboxConstraint = generateConstraintImage(thumbnailContainer);
              var focusableElement = document.createElement("div");
              focusableElement.id = "vidyard-focusable-element";
              focusableElement.tabIndex = 0;
              lightbox.popbox.appendChild(container.backerElement);
              lightbox.popbox.appendChild(container.containingDiv);
              lightbox.popbox.appendChild(lightboxConstraint);
              if (user_agent_checker.ios()) {
                ariaHideChildElements();
              }
              document.body.appendChild(lightbox.overlayWrapper);
              document.body.appendChild(focusableElement);
              lightbox.closeContainer.focus();
              index_esm.on(lightbox.overlayWrapper);
              makeup_screenreader_trap_default.a.trap(lightbox.overlayWrapper);
              setTimeout(function animateOpacity() {
                lightbox.overlayWrapper.style.opacity = "1";
                lightbox.overlayWrapper.style.filter = "alpha(opacity=100)";
              }, 0);
              return {
                container,
                lightbox
              };
            }
            function remove(callbacks) {
              var fixedElement = document.getElementById("vidyard-content-fixed");
              var focusableElement = document.getElementById("vidyard-focusable-element");
              var overlay = document.getElementById("vidyard-overlay");
              var overlayWrapper = document.getElementById("vidyard-overlay-wrapper");
              var popbox = document.getElementById("vidyard-popbox");
              if (!fixedElement || !overlay || !overlayWrapper || !popbox) {
                return;
              }
              if (callbacks) {
                Object.keys(callbacks).forEach(function(k) {
                  var cb = callbacks[k];
                  cb();
                });
              }
              if (focusableElement) {
                focusableElement.parentNode.removeChild(focusableElement);
              }
              index_esm.off(overlayWrapper);
              makeup_screenreader_trap_default.a.untrap(overlayWrapper);
              overlayWrapper.style.opacity = "0";
              overlayWrapper.style.filter = "alpha(opacity=0)";
              var cleanup = function() {
                overlayWrapper.parentNode.removeChild(overlayWrapper);
              };
              if (user_agent_checker.ios()) {
                undoAriaHideChildElements();
              }
              setTimeout(cleanup, OVERLAY_FADE_TIME * 1e3);
            }
            function makeIframeVisible(iframe) {
              iframe.style.opacity = "1";
            }
            function generateLightboxHTML(overlayZindex) {
              var overlay = document.createElement("div");
              var contentFixed = document.createElement("div");
              var popbox = document.createElement("div");
              var overlayWrapper = document.createElement("div");
              var closeContainer = generateCloseButton().closeContainer;
              overlay.id = "vidyard-overlay";
              overlay.setAttribute("aria-hidden", "true");
              overlay.style.display = "block";
              contentFixed.id = "vidyard-content-fixed";
              contentFixed.setAttribute("aria-label", "media player lightbox");
              contentFixed.setAttribute("role", "dialog");
              contentFixed.style.display = "block";
              popbox.id = "vidyard-popbox";
              overlayWrapper.id = "vidyard-overlay-wrapper";
              overlayWrapper.style.display = "block";
              contentFixed.appendChild(popbox);
              overlayWrapper.appendChild(overlay);
              overlayWrapper.appendChild(closeContainer);
              overlayWrapper.appendChild(contentFixed);
              if (overlayZindex) {
                overlay.style.zIndex = "" + overlayZindex;
                contentFixed.style.zIndex = "" + (overlayZindex + 2);
                closeContainer.style.zIndex = "" + (overlayZindex + 1);
              }
              return {
                closeContainer,
                contentFixed,
                overlay,
                overlayWrapper,
                popbox
              };
            }
            function generateCloseButton() {
              var closeContainer = document.createElement("div");
              var closeButton = document.createElement("div");
              closeContainer.className = "vidyard-close-container";
              closeContainer.setAttribute("aria-label", "Close Player");
              closeContainer.setAttribute("role", "button");
              closeContainer.setAttribute("tabindex", "0");
              closeButton.className = "vidyard-close-x";
              if (document.documentMode < 9) {
                closeButton.className += " simple-close";
                closeButton.innerHTML = "&times;";
              }
              closeContainer.appendChild(closeButton);
              return { closeButton, closeContainer };
            }
            function generateLightboxContainer(playerIframeDOMString) {
              var backerElement = document.createElement("div");
              backerElement.className = "vidyard-lightbox-content-backer";
              var containerElement = document.createElement("div");
              containerElement.innerHTML = playerIframeDOMString;
              var containingDiv = containerElement.getElementsByTagName("div")[0];
              containingDiv.style.position = "absolute";
              containingDiv.style.height = "100%";
              containingDiv.style.width = "100%";
              containingDiv.style.zIndex = "2";
              var iframe = containerElement.getElementsByTagName("iframe")[0];
              var iframeParent = iframe.parentNode;
              iframeParent.style.position = "static";
              iframeParent.style.paddingBottom = "0";
              iframe.style.opacity = "1";
              setTimeout(function() {
                backerElement.style.opacity = "1";
                backerElement.style.filter = "alpha(opacity=100)";
              }, 0);
              return {
                backerElement,
                containerElement,
                containingDiv,
                iframe
              };
            }
            function generateConstraintImage(container) {
              var image = getElementByClass("vidyard-lightbox-image", "img", container)[0].cloneNode();
              image.className = "";
              image.id = "vidyard-popbox-constraint";
              image.alt = "";
              image.setAttribute("aria-hidden", "true");
              return image;
            }
            var ACTIVE_ELEMENT;
            var LIGHTBOX_EVENTS = {};
            function setupAnimations(options) {
              var thumbnailContainer = getElementByClass("vidyard-lightbox-centering", "div", options.container)[0];
              options.player.showLightbox = function showLightboxHandler() {
                logger.setLevel(options.player.uuid)("show lightbox");
                showLightbox({
                  container: options.container,
                  iframe: options.iframe,
                  overlayZindex: options.overlayZindex,
                  player: options.player
                });
              };
              options.player.hideLightbox = function() {
                return removeLightbox(options.player);
              };
              addListener("click", "onclick", options.player.showLightbox, thumbnailContainer);
              addListener("keydown", "onkeydown", spaceOrEnterKeyPressEvent(function(e) {
                e.preventDefault();
                options.player.showLightbox(e);
              }), thumbnailContainer);
            }
            function showLightbox(options) {
              if (!options.iframe || document.getElementById("vidyard-overlay")) {
                return;
              }
              ACTIVE_ELEMENT = document.activeElement;
              var lightboxDOM = show(options.iframe, options.container, options.overlayZindex);
              options.player.iframe = lightboxDOM.container.iframe;
              options.player.on("metadata", function updateLightboxIframeTitle(args) {
                var metadata = args[0];
                options.player.iframe.title = metadata.name;
                options.player.off("metadata", updateLightboxIframeTitle);
              });
              var uuid = options.player.uuid;
              var iframe = lightboxDOM.container.iframe;
              var iframeLoaded = onIframeLoad(iframe, uuid, options.player);
              var listenForKeyPress = iframeListenForKeyPress(iframe, uuid);
              LIGHTBOX_EVENTS.iframeLoaded = addListener("load", "onload", iframeLoaded, lightboxDOM.container.iframe);
              LIGHTBOX_EVENTS.messageHandler = addListener(
                "message",
                "onmessage",
                // @TODO add better types for data
                receive(function(data) {
                  iframeLoaded();
                  listenForKeyPress();
                  onEscInIframe(data, options.player);
                }),
                window
              );
              LIGHTBOX_EVENTS.overlayClick = addListener("click", "onclick", function() {
                return removeLightbox(options.player);
              }, lightboxDOM.lightbox.overlayWrapper);
              LIGHTBOX_EVENTS.fixedClick = addListener("click", "onclick", function() {
                return removeLightbox(options.player);
              }, lightboxDOM.lightbox.contentFixed);
              LIGHTBOX_EVENTS.closeKeyPress = addListener("keydown", "onkeydown", spaceOrEnterKeyPressEvent(function() {
                return removeLightbox(options.player);
              }), lightboxDOM.lightbox.closeContainer);
              LIGHTBOX_EVENTS.responsivePlayerSize = addListener("resize", "onresize", lightbox_animator_handleResize, window);
            }
            function lightbox_animator_handleResize() {
              var constraintImage = document.getElementById("vidyard-popbox-constraint");
              var windowRatio = parseFloat((window.innerHeight / window.innerWidth * 100).toFixed(2));
              var imageRatio = parseFloat(calcAspectRatio(constraintImage));
              var orientation = windowRatio < imageRatio ? "landscape" : "portrait";
              if (constraintImage.className !== orientation) {
                constraintImage.className = orientation;
              }
            }
            function removeLightbox(player) {
              remove();
              if (ACTIVE_ELEMENT) {
                ACTIVE_ELEMENT.focus();
              }
              Object.keys(LIGHTBOX_EVENTS).forEach(function(key) {
                var _a = LIGHTBOX_EVENTS[key], eventName = _a.eventName, handler = _a.handler, element = _a.element;
                removeListener(eventName, handler, element);
              });
              if (player) {
                player.trigger("lightboxClose");
              }
            }
            function onEscInIframe(postMessageData, player) {
              if (postMessageData.event === "keyPressed" && postMessageData.params === 27) {
                removeLightbox(player);
              }
            }
            function onIframeLoad(iframe, uuid, player) {
              return once(function() {
                makeIframeVisible(iframe);
                lightbox_animator_handleResize();
                LIGHTBOX_EVENTS.parentEsc = addListener("keydown", "onkeydown", escKeyPressEvent(function() {
                  return removeLightbox(player);
                }), document);
              });
            }
            function iframeListenForKeyPress(iframe, uuid) {
              return once(function() {
                var message = { uuid, event: "listenForKeyPress", keyCode: "27" };
                send(message, "https://" + getPlaybackURL(), iframe);
              });
            }
            var __assign = Object.assign || function(t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                  if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
              }
              return t;
            };
            function getPlayerMetadata(uuid) {
              if (!uuid || typeof uuid !== "string" || uuid.length < 20) {
                throw new Error("Invalid UUID given");
                return;
              }
              var log = logger.setLevel(uuid);
              var metadataEndpoint = "https://" + getPlaybackURL() + "/player/" + uuid + ".json?pomo=0&pomo_reason=fetchMetaData";
              log("fetching metadata");
              return xhrRequest({ endpoint: metadataEndpoint }).then(JSON.parse).then(function(data) {
                log("metadata successfully fetched");
                return __assign({ uuid }, data.payload.vyContext.metadata);
              }).catch(function(e) {
                log("failed to fetch metadata, " + e);
                throw new Error("Error parsing player metadata, make sure the UUID is correct");
              });
            }
            function init(embedScriptElement, queryParams, sizing) {
              var lightboxThumbnailUrl = "https://" + getPlaybackURL() + "/" + queryParams.uuid + ".jpg";
              var lightboxString = composeLightboxString(lightboxThumbnailUrl, queryParams, sizing);
              embedScriptElement.insertAdjacentHTML("afterbegin", lightboxString);
              getPlayerMetadata(queryParams.uuid).then(function(metadata) {
                var playButton = getElementByClass("play-button", "button", embedScriptElement);
                if (playButton.length !== 1) {
                  return;
                }
                playButton[0].setAttribute("aria-label", "Play video " + metadata.name + ". Opens in a modal");
              }, function() {
              });
            }
            function applyLightboxPlayButton(pbData, embedScriptElement) {
              if (pbData.pb !== 1) {
                return;
              }
              var playButton = getElementByClass("play-button", "button", embedScriptElement);
              if (playButton.length !== 1) {
                return;
              }
              playButton[0].style.display = "block";
              playButton[0].style.backgroundColor = "#" + pbData.pbc;
            }
            function composeLightboxString(lightboxThumbnailUrl, queryParams, sizing) {
              return '<div class="vidyard-lightbox-thumbnail vidyard-lightbox-' + queryParams.uuid + '"' + (sizing.maxWidth ? ' style="max-width: ' + sizing.maxWidth + 'px;"' : "") + '><div class="vidyard-lightbox-centering" style="padding-bottom: ' + sizing.ratio + '%;"><img class="vidyard-lightbox-image" src="' + lightboxThumbnailUrl + '" alt="video thumbnail" /><div type="button" role="button" class="play-button" title="Play video" data-version="1" tabindex="0"><div class="play-button-size"></div><div class="arrow-size"><div class="arrow-size-ratio"></div><div class="arrow"></div></div></div></div></div>';
            }
            var injectLightboxElements = function(_a) {
              var dataParams = _a.dataParams, player = _a.player;
              var log = logger.setLevel(dataParams.uuid);
              log("injecting lighbox embed");
              player.placeholder.style.display = "none";
              var iframeSizing = { ratio: calcAspectRatio(player.placeholder) };
              var playerIframe = createIframe(dataParams, iframeSizing);
              var thumbnailSizing = {
                maxHeight: dataParams.height ? parseInt(dataParams.height, 10) : null,
                maxWidth: dataParams.width ? parseInt(dataParams.width, 10) : null,
                ratio: calcAspectRatio(player.placeholder)
              };
              init(player.container, dataParams, thumbnailSizing);
              setupAnimations({
                container: player.container,
                iframe: playerIframe,
                overlayZindex: dataParams.overlayZindex,
                player
              });
              log("getStyle sent");
              getStyle(player.uuid).then(function(data) {
                log("getStyle received: " + JSON.stringify(data));
                applyLightboxPlayButton(data, player.container);
              }).catch(function(e) {
                log("getStyle failed, likely a network error");
              });
            };
            var lightbox_player = injectLightboxElements;
            var SKIP_BACKLINK_HOSTNAMES_RE = /(vidyard|vystaging|hubspot)\.com$/;
            var injectBacklink = function(player, data, force) {
              if (force === void 0) {
                force = false;
              }
              if (!force && (!data || !data.hasBacklink || SKIP_BACKLINK_HOSTNAMES_RE.test(document.location.host))) {
                return;
              }
              var linkEl = document.createElement("a");
              var linkTextEl = document.createElement("span");
              var imgEl = document.createElement("img");
              imgEl.src = "https://cdn.vidyard.com/client-logos/vidyard.png";
              imgEl.id = "backlink-icon";
              imgEl.alt = "Vidyard Logo";
              linkTextEl.id = "backlink-text";
              linkTextEl.textContent = "Powered by Vidyard";
              linkEl.id = "backlink";
              linkEl.appendChild(imgEl);
              linkEl.appendChild(linkTextEl);
              linkEl.href = data.backlinkURL;
              linkEl.rel = "nofollow";
              linkEl.target = "_blank";
              linkEl.setAttribute("aria-label", "Link to Vidyard");
              linkEl.dataset.testid = "backlink";
              addListener("click", "onclick", function() {
                var message = {
                  data: {
                    event: "Acquisition - Clicked the Backlink"
                  },
                  event: "sendMetricsEvent",
                  uuid: player.uuid
                };
                send(message, "https://" + getPlaybackURL(), player.iframe);
              }, linkEl);
              player.container.appendChild(linkEl);
            };
            var backlink = injectBacklink;
            function integrationsControler(player) {
              var integrations = window.VidyardV4.integrations;
              var log = logger.setLevel(player.uuid);
              var marketoCookie = integrations.getCookie("marketo");
              if (marketoCookie) {
                log("getMarketoLead sent");
                getMarketoLead(player.uuid, marketoCookie).then(checkJSONParse).then(function(leadData) {
                  log("getMarketoLead received: " + leadData);
                  player.on("ready", function() {
                    integrations.addKnownVisitor("marketo", leadData, player.org);
                  });
                }).catch(function() {
                  logger.warn("Invalid Marketo cookie");
                });
              }
              log("getIntegrations");
              getIntegrations(player.uuid).then(function(data) {
                log("getIntegrations received: " + JSON.stringify(data));
                player.on("ready", function() {
                  player._tmpOrg = data;
                  integrations.updatePlayer(player);
                });
              }).catch(function(e) {
                log("getIntegrations failed, likely a network error");
              });
            }
            function seoController(uuid) {
              var log = logger.setLevel(uuid);
              log("getSEO sent");
              return getSEO(uuid).then(function(data) {
                log("getSEO: " + JSON.stringify(data));
                if (!isObjectEmpty(data)) {
                  var jsonLD = createJsonLD(data);
                  document.getElementsByTagName("head")[0].appendChild(jsonLD);
                }
                return data;
              }).catch(function(e) {
                log("getSEO failed, likely a network error");
              });
            }
            var createContainer = function(uuid, dataParams) {
              var container = document.createElement("div");
              container.className = "vidyard-player-container";
              container.setAttribute("uuid", uuid);
              var styles = container.style;
              styles.margin = "auto";
              styles.width = "100%";
              styles.height = "auto";
              styles.overflow = "hidden";
              styles.display = "block";
              if (dataParams.type === "inline") {
                styles.maxWidth = dataParams.width ? dataParams.width + "px" : "";
                styles.maxHeight = dataParams.height ? dataParams.height + "px" : "";
              }
              return container;
            };
            var views_container = createContainer;
            var data_params_DataParams = (
              /** @class */
              function() {
                function DataParams(placeHolderImage) {
                  var _this = this;
                  this.disable_popouts = 1;
                  var data = parseVyData(dataSet(placeHolderImage));
                  Object.keys(data).forEach(function(key) {
                    _this[key] = data[key];
                  });
                  if (this.type !== "inline" && this.type !== "lightbox") {
                    embed_helpers_log("Invalid Vidyard player embed type, defaulting to inline.", "warn");
                    this.type = "inline";
                  }
                  this.v = VERSION;
                  this.disable_popouts = 1;
                  this.custom_id = this.custom_id || getQueryParam("vycustom_id");
                  this.vyemail = this.vyemail || getQueryParam("vyemail");
                  this.vysfid = this.vysfid || getQueryParam("vysfid");
                  this.vyetoken = this.vyetoken || getQueryParam("vyetoken");
                  var vyac = getQueryParam("vyac");
                  var vyplayer = getQueryParam("vyplayer");
                  if (vyac && vyplayer && vyplayer === this.uuid) {
                    this.access_code = vyac;
                  } else if (vyac && vyplayer) {
                    embed_helpers_log("Invalid Vidyard player access code.", "warn");
                  }
                }
                DataParams.prototype.toQueryString = function() {
                  var queryParamsString = "?";
                  var key;
                  for (key in this) {
                    if (!this.hasOwnProperty(key)) {
                      continue;
                    }
                    if (key === "height" || key === "uuid" || key === "width") {
                      continue;
                    }
                    if (this[key] === void 0) {
                      continue;
                    }
                    queryParamsString += queryParamsString !== "?" ? "&" : "";
                    queryParamsString += encodeURIComponent(key) + "=" + encodeURIComponent(this[key]);
                  }
                  return queryParamsString === "?" ? "" : queryParamsString;
                };
                return DataParams;
              }()
            );
            var data_params = data_params_DataParams;
            function preloadFrames(embeds) {
              if (embeds === void 0) {
                embeds = getElementByClass("vidyard-player-embed", "img");
              }
              for (var _i = 0, embeds_1 = embeds; _i < embeds_1.length; _i++) {
                var ele = embeds_1[_i];
                var dataParams = new data_params(ele);
                var uuid = dataParams.uuid;
                var preloadHref = "https://" + getPlaybackURL() + "/" + uuid + dataParams.toQueryString();
                if (!uuid) {
                  continue;
                }
                if (indexOfArray(preloadHref, window.VidyardV4.preloadLinks) === -1) {
                  addPrefetchLink(uuid, preloadHref);
                  window.VidyardV4.preloadLinks.push(preloadHref);
                }
              }
            }
            function addPrefetchLink(uuid, href) {
              var preloadLink = document.createElement("link");
              preloadLink.rel = "prefetch";
              preloadLink.crossOrigin = "anonymous";
              preloadLink.href = href;
              document.body.appendChild(preloadLink);
              return href;
            }
            var vidyard_player_assign = Object.assign || function(t) {
              for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                  if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
              }
              return t;
            };
            var vidyard_player_Player = (
              /** @class */
              function() {
                function Player(element, uuid, callbackStore) {
                  var _this = this;
                  this._ready = false;
                  this._previousTime = null;
                  this._onMessageEventHandler = function(event) {
                    if (event.origin !== "https://" + getPlaybackURL()) {
                      return;
                    }
                    var data;
                    try {
                      data = JSON.parse(event.data);
                    } catch (e) {
                      return;
                    }
                    if (_this.iframe && event.source && _this.iframe.contentWindow !== event.source) {
                      return;
                    }
                    if (_this.uuid && data.uuid !== _this.uuid) {
                      return;
                    }
                    if (typeof data.event !== "string") {
                      return;
                    }
                    _this._updateStatus(data);
                    if (data.event === "ready") {
                      _this._ready = true;
                      window.VidyardV4.integrations.updatePlayer(_this);
                    }
                    var eventCallbacks = _this._callbackStore[data.event];
                    if (eventCallbacks) {
                      for (var _i = 0, eventCallbacks_1 = eventCallbacks; _i < eventCallbacks_1.length; _i++) {
                        var callback = eventCallbacks_1[_i];
                        callback.call(_this, data.params, _this);
                      }
                    }
                  };
                  this._callbackStore = callbackStore || {
                    beforeSeek: [],
                    chapterComplete: [],
                    createCta: [],
                    fullScreenChange: [],
                    lightboxClose: [],
                    metadata: [],
                    pause: [],
                    play: [],
                    playerComplete: [],
                    ready: [],
                    seek: [],
                    sidePlaylistOpen: [],
                    status: [],
                    timeupdate: [],
                    videoComplete: [],
                    volumeChange: []
                  };
                  this.element = element;
                  this.uuid = uuid;
                  this.status = null;
                  this.metadata = null;
                  this.progressEventsUnsubscribe = [];
                  addListener("message", "onmessage", this._onMessageEventHandler);
                }
                Player.prototype.on = function(eventName, callback) {
                  var _this = this;
                  if (eventName === "ready" && this.ready()) {
                    setTimeout(function() {
                      return callback.call(_this, void 0, _this);
                    }, 0);
                    return;
                  }
                  if (this._callbackStore[eventName] === void 0) {
                    this._callbackStore[eventName] = [callback];
                    embed_helpers_log("The event name: " + eventName + " is not supported, your handler was setup regardless", "warn");
                    return;
                  }
                  this._callbackStore[eventName].push(callback);
                };
                Player.prototype.trigger = function(eventName) {
                  var _this = this;
                  var args = [];
                  for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                  }
                  var _loop_1 = function(callback2) {
                    if (eventName === "ready" && this_1.ready()) {
                      setTimeout(function() {
                        return callback2.call(_this, args, _this);
                      }, 0);
                    } else {
                      callback2.call(this_1, args, this_1);
                    }
                  };
                  var this_1 = this;
                  for (var _a = 0, _b = this._callbackStore[eventName]; _a < _b.length; _a++) {
                    var callback = _b[_a];
                    _loop_1(callback);
                  }
                };
                Player.prototype.off = function(eventName, callback) {
                  if (eventName === void 0) {
                    for (var evt in this._callbackStore) {
                      if (this._callbackStore.hasOwnProperty(evt)) {
                        this._callbackStore[evt] = [];
                      }
                    }
                    return;
                  }
                  if (!this._callbackStore[eventName]) {
                    return;
                  }
                  if (callback) {
                    var index = indexOfArray(callback, this._callbackStore[eventName]);
                    if (index > -1) {
                      this._callbackStore[eventName].splice(index, 1);
                    }
                  } else {
                    this._callbackStore[eventName] = [];
                  }
                };
                Player.prototype.ready = function() {
                  return this._ready;
                };
                Player.prototype.play = function() {
                  this._message({ event: "play" });
                };
                Player.prototype.pause = function() {
                  this._message({ event: "pause" });
                };
                Player.prototype.resume = function() {
                  this._message({ event: "resume" });
                };
                Player.prototype.seek = function(position) {
                  this._message({ event: "seek", position });
                };
                Player.prototype.setVolume = function(newVolume) {
                  this._message({ event: "setVolume", newVolume });
                };
                Player.prototype.setPlaybackSpeed = function(speed) {
                  this._message({ event: "setPlaybackSpeed", speed });
                };
                Player.prototype.playChapter = function(chapterIndex) {
                  embed_helpers_log("playChapter() is deprecated. We recommend to use playVideoAtIndex() instead.");
                  this.playVideoAtIndex(chapterIndex);
                };
                Player.prototype.playVideoAtIndex = function(index) {
                  this._message({ chapter_index: index, event: "playChapter" });
                };
                Player.prototype.setAudioTrack = function(audioTrackId) {
                  this._message({ audioTrackId, event: "setAudioTrack" });
                };
                Player.prototype.enableCaption = function(label, language) {
                  this._message({ event: "enableCaption", label, language });
                };
                Player.prototype.disableCaption = function(label, language) {
                  this._message({ event: "disableCaption", label, language });
                };
                Player.prototype.consentToGDPR = function(consent2) {
                  this._message({ consent: consent2, event: "consentToGDPR" });
                };
                Player.prototype.createCta = function(attributes14) {
                  this._message({
                    attributes: shallowMerge({
                      display_once: false,
                      duration: 10,
                      fullscreen: false,
                      html: "",
                      opacity: 1,
                      start: 0,
                      width: 300
                    }, attributes14),
                    event: "createCta"
                  });
                };
                Player.prototype.updateCta = function(ctaId, attributes14) {
                  this._message({
                    attributes: attributes14,
                    event: "updateCta",
                    id: ctaId
                  });
                };
                Player.prototype.createVideoSection = function(title, milliseconds) {
                  this._message({ event: "createVideoSection", title, milliseconds });
                };
                Player.prototype.updateVideoSection = function(index, title, milliseconds) {
                  this._message({ event: "updateVideoSection", index, title, milliseconds });
                };
                Player.prototype.deleteVideoSection = function(index) {
                  this._message({ event: "deleteVideoSection", index });
                };
                Player.prototype.addEvent = function(_a) {
                  var _b = _a.start, start = _b === void 0 ? 0 : _b, _c = _a.duration, duration = _c === void 0 ? 1 : _c, videoIndex = _a.videoIndex, chapterIndex = _a.chapterIndex, eventId = _a.eventId;
                  if (!eventId) {
                    embed_helpers_log("Missing arguments. Need eventId");
                    return;
                  }
                  if (chapterIndex >= 0) {
                    embed_helpers_log("Parameter chapterIndex is deprecated. We recommend to use videoIndex instead.");
                  }
                  var index = 0;
                  index = chapterIndex ? chapterIndex : index;
                  index = videoIndex ? videoIndex : index;
                  this._message({
                    chapterIndex: index,
                    duration,
                    event: "addEvent",
                    id: eventId,
                    start
                  });
                };
                Player.prototype.getCurrentChapter = function() {
                  embed_helpers_log("getCurrentChapter() is deprecated. We recommend to use getCurrentVideoIndex() instead.");
                  return this.getCurrentVideoIndex();
                };
                Player.prototype.getCurrentVideoIndex = function() {
                  return this.status === null ? null : this.status.chapterIndex;
                };
                Player.prototype.currentTime = function() {
                  return this.status === null ? null : this.status.currentTime;
                };
                Player.prototype.scrubbing = function() {
                  return this.status === null ? null : this.status.scrubbing;
                };
                Player.prototype.toggleFullscreen = function() {
                  var _this = this;
                  var fullscreenAPI = getFullscreenAPI();
                  if (fullscreenAPI) {
                    var fullscreenPromise = this.iframe[fullscreenAPI.requestFullscreen]();
                    if (fullscreenPromise) {
                      fullscreenPromise.then(function() {
                        _this._message({ event: "toggleFullscreen" });
                      });
                    } else {
                      this._message({ event: "toggleFullscreen" });
                    }
                    addListener(fullscreenAPI.fullscreenchange, "MSFullscreenChange", function() {
                      if (!document[fullscreenAPI.fullscreenElement]) {
                        _this._message({ event: "exitFullscreen" });
                      }
                    });
                    addListener("message", "onmessage", receive(function(data) {
                      if (data.event === "fullScreenChange" && data.params === false) {
                        if (document[fullscreenAPI.fullscreenElement]) {
                          document[fullscreenAPI.exitFullscreen]();
                        }
                      }
                    }));
                  } else {
                    this._message({ event: "toggleFullscreen" });
                  }
                };
                Player.prototype.resetPlayer = function() {
                  this._message({ event: "resetPlayer" });
                };
                Player.prototype._message = function(options) {
                  if (this.ready() !== true) {
                    embed_helpers_log("Player is not ready yet! No messages can be recieved.", "error");
                    return;
                  }
                  send(vidyard_player_assign({}, options, { uuid: this.uuid }), "https://" + getPlaybackURL(), this.iframe);
                };
                Player.prototype._updateStatus = function(data) {
                  if (typeof data.status === "object") {
                    this.status = data.status;
                  }
                  if (typeof data.metadata === "object") {
                    this.metadata = data.metadata;
                    this.trigger("metadata", data.metadata);
                  }
                  if (this.status) {
                    if (this.status.currentTime !== this._previousTime && this._callbackStore.timeupdate) {
                      for (var _i = 0, _a = this._callbackStore.timeupdate; _i < _a.length; _i++) {
                        var callback = _a[_i];
                        callback.call(this, this.status.currentTime, this);
                      }
                    }
                    this._previousTime = this.status.currentTime;
                  }
                };
                return Player;
              }()
            );
            var vidyard_player = vidyard_player_Player;
            var sweepDocument = function(container) {
              if (container === void 0) {
                container = document;
              }
              var embedLocations = getElementByClass("vidyard-player-embed", "img", container);
              preloadFrames(embedLocations);
              toArray(embedLocations).forEach(renderPlayer);
              dispatch_ready();
            };
            var renderPlayer = function(placeholderImg) {
              var _a = window.VidyardV4, integrations = _a.integrations, api = _a.api, players = _a.players, playerReadyListeners = _a.playerReadyListeners;
              var dataParams = new data_params(placeholderImg);
              var uuid = dataParams.uuid;
              var log = logger.setLevel(uuid);
              log("rendering");
              if (uuid === void 0) {
                embed_helpers_log('Embed without a UUID detected, it is impossible to insert a player without a UUID. Add "data-uuid=some_uuid" to the offending element.' + placeholderImg);
                return;
              }
              if (dataParams.rendered === "true") {
                log("Already rendered");
                return find(players, function(player) {
                  return player.placeholder === placeholderImg;
                });
              }
              var container = views_container(uuid, dataParams);
              var newPlayer = new vidyard_player(container, uuid);
              placeholderImg.setAttribute("data-rendered", "true");
              placeholderImg.parentNode.insertBefore(container, placeholderImg);
              newPlayer.placeholder = placeholderImg;
              newPlayer.container = container;
              players.push(newPlayer);
              processReadyListeners(newPlayer);
              if (dataParams.type === "inline") {
                inline_player({ dataParams, player: newPlayer });
              } else if (dataParams.type === "lightbox") {
                lightbox_player({ dataParams, player: newPlayer });
              }
              integrationsControler(newPlayer);
              seoController(newPlayer.uuid).then(function(jsonpData) {
                if (dataParams.type === "inline") {
                  backlink(newPlayer, jsonpData, dataParams.backlink && dataParams.backlink === 1);
                }
              });
              window.Vidyard._players[newPlayer.uuid] = newPlayer;
              return newPlayer;
            };
            function unsubscribeProgressEvents(player) {
              player.progressEventsUnsubscribe.forEach(function(cb) {
                return cb();
              });
              player.progressEventsUnsubscribe = [];
            }
            function destroyPlayer(player) {
              var players = window.VidyardV4.players;
              if (includes(players, player)) {
                unsubscribeProgressEvents(player);
                player.off();
                player.container.parentNode.removeChild(player.container);
                player.placeholder.parentNode.removeChild(player.placeholder);
                players.splice(indexOfArray(player, players));
              } else {
                embed_helpers_log("Cannot destroy an unknown player", "warn");
              }
            }
            function consent(userConsent) {
              if (userConsent === void 0) {
                return;
              }
              var players = window.VidyardV4.players;
              var _loop_1 = function(player2) {
                player2.on("ready", function() {
                  player2.consentToGDPR(userConsent);
                });
              };
              for (var _i = 0, players_1 = players; _i < players_1.length; _i++) {
                var player = players_1[_i];
                _loop_1(player);
              }
            }
            function hasConsentOnReady(callback) {
              var playersReady = 0;
              var gdpr = window.VidyardV4.api.GDPR;
              var players = window.VidyardV4.players;
              if (players.length === 0) {
                return callback(false);
              }
              if (gdpr._readyConsent !== void 0) {
                return callback(gdpr._readyConsent);
              }
              for (var _i = 0, players_2 = players; _i < players_2.length; _i++) {
                var player = players_2[_i];
                player.on("ready", function() {
                  if (playersReady !== players.length) {
                    playersReady += 1;
                  }
                  if (playersReady === players.length) {
                    gdpr._readyConsent = players.reduce(function(c, p) {
                      return p.status.consent && c;
                    }, true);
                    return callback(gdpr._readyConsent);
                  }
                });
              }
            }
            function getPlayersByUUID(uuid) {
              return window.VidyardV4.players.filter(function(player) {
                return player.uuid === uuid;
              });
            }
            var get_players_by_uuid = getPlayersByUUID;
            var removeDuplicates = function(targetArray) {
              targetArray.sort(function(a, b) {
                if (a < b) {
                  return -1;
                }
                if (a > b) {
                  return 1;
                }
                return 0;
              });
              var i = 0;
              while (i < targetArray.length) {
                if (targetArray[i] === targetArray[i + 1]) {
                  targetArray.splice(i + 1, 1);
                } else {
                  i += 1;
                }
              }
              return targetArray;
            };
            var templates = {};
            var listeners = {};
            var partOfVideoWatched = {};
            function addTemplate(player, callback, thresholds) {
              if (typeof listeners[player.uuid] !== "object") {
                listeners[player.uuid] = {};
              }
              templates[player.uuid] = {
                callback,
                thresholds: thresholds.slice().sort(function(a, b) {
                  return b - a;
                })
              };
            }
            function copyTemplate(player, videoIndex) {
              setup_event_listeners_addListener(player, videoIndex, templates[player.uuid].callback, templates[player.uuid].thresholds.slice());
            }
            function getListener(player, videoIndex) {
              if (typeof templates[player.uuid] !== "object") {
                return void 0;
              }
              if (typeof listeners[player.uuid][videoIndex] !== "object") {
                copyTemplate(player, videoIndex);
              }
              return listeners[player.uuid][videoIndex];
            }
            function setup_event_listeners_addListener(player, videoIndex, callback, thresholds) {
              listeners[player.uuid][videoIndex] = {
                callback,
                lastTimeUpdate: player.currentTime(),
                player,
                thresholds,
                timeWatched: 0
              };
            }
            function removeTemplateAndListeners(player) {
              templates[player.uuid] = void 0;
              listeners[player.uuid] = void 0;
            }
            function updateTimeWatched(player, time) {
              var videoIndex = player.getCurrentVideoIndex();
              var listener = getListener(player, videoIndex);
              if (typeof listener === "undefined" || typeof listener.player.metadata !== "object" || listener.thresholds.length === 0) {
                return;
              }
              var deltaTime = time - listener.lastTimeUpdate;
              listener.lastTimeUpdate = time;
              if (deltaTime <= 0 || deltaTime > 1) {
                return;
              }
              if (time >= 1) {
                partOfVideoWatched[Math.floor(time)] = 1;
              }
              listener.timeWatched = Object.keys(partOfVideoWatched).length;
              var duration = listener.player.metadata.chapters_attributes[videoIndex].video_attributes.length_in_seconds;
              var percentWatched = listener.timeWatched / duration * 100;
              while (percentWatched >= listener.thresholds[listener.thresholds.length - 1]) {
                listener.callback({
                  // Deprecated. Only included for backwards compatibility
                  chapter: videoIndex,
                  event: listener.thresholds.pop(),
                  player,
                  videoIndex
                });
              }
            }
            function setupEventListeners(player, callback, thresholds) {
              addTemplate(player, callback, thresholds);
              var onTimeUpdate = function(time) {
                return updateTimeWatched(player, time);
              };
              player.on("timeupdate", onTimeUpdate);
              return {
                player,
                removeEventListeners: function() {
                  player.off("timeupdate", onTimeUpdate);
                  removeTemplateAndListeners(player);
                }
              };
            }
            function progressEvents(callback, thresholds, singlePlayerScope) {
              var _a;
              if (thresholds === void 0) {
                thresholds = [1, 25, 50, 75, 90];
              }
              var removeEventListeners = [];
              var players = singlePlayerScope ? (_a = {}, _a[singlePlayerScope.uuid] = singlePlayerScope, _a) : getPlayers();
              var dedupedThresholds = removeDuplicates(thresholds);
              var _loop_1 = function(uuid2) {
                if (players.hasOwnProperty(uuid2) && uuid2.length > 0 && players[uuid2] !== "") {
                  var removeCb = setupEventListeners(players[uuid2], callback, dedupedThresholds);
                  removeEventListeners.push(removeCb);
                } else {
                  embed_helpers_log(function() {
                    return console.error("Could not attach Progress Events to player " + uuid2 + ", make sure to load the Vidyard Player API");
                  });
                }
              };
              for (var uuid in players) {
                _loop_1(uuid);
              }
              if (removeEventListeners.length === 0) {
                embed_helpers_log(function() {
                  return console.warn("No Vidyard Players found. (include this script below player embed codes)");
                });
              }
              return removeEventListeners;
            }
            function getPlayers() {
              try {
                return window.Vidyard.players();
              } catch (e) {
                embed_helpers_log(function() {
                  return console.error("The Vidyard Player API must be loaded before this script can execute");
                });
                return {};
              }
            }
            function progressEventsWrapper() {
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              var subscriptions = progressEvents.apply(void 0, args);
              Object.keys(subscriptions).forEach(function(k) {
                var _a = subscriptions[k], player = _a.player, removeEventListeners = _a.removeEventListeners;
                if (player.progressEventsUnsubscribe) {
                  player.progressEventsUnsubscribe.push(removeEventListeners);
                }
              });
            }
            var renderPlayerFromPlaceholder = function(image) {
              logger.setLevel("placeholder")("rendering player from placeholder image");
              var player = renderPlayer(image);
              return new promise(function(res) {
                if (player.showLightbox) {
                  res(player);
                } else {
                  player.on("ready", function() {
                    return res(player);
                  });
                }
              });
            };
            function render_player_renderPlayer(options) {
              var placeholder = options instanceof HTMLImageElement ? options : createPlaceholder(options);
              return loadPlaceholder(placeholder).then(renderPlayerFromPlaceholder).catch(function(e) {
                return embed_helpers_log(messages.errors.placeholder, "warn");
              });
            }
            var vidyardV4Global = {
              _debug: api_debug,
              api: {
                GDPR: { consent, hasConsentOnReady },
                addReadyListener,
                destroyPlayer,
                getPlayerMetadata,
                getPlayersByUUID: get_players_by_uuid,
                progressEvents: progressEventsWrapper,
                renderDOMPlayers: sweepDocument,
                renderPlayer: render_player_renderPlayer
              },
              integrations: new IntegrationsWatcher(),
              jsonp: {},
              // Just ensure that the undefined uuid option is always present
              playerReadyListeners: { undefined: [] },
              players: [],
              preloadLinks: []
            };
            var vidyard_v4_global = vidyardV4Global;
            var vidyardGlobal = {
              _players: {},
              players: function() {
                return window.VidyardV4.players.reduce(function(acc, player) {
                  acc[player.uuid] = player;
                  return acc;
                }, {});
              }
            };
            var vidyard_global = vidyardGlobal;
            var css_style = __webpack_require__(12);
            var error_stack_parser = __webpack_require__(2);
            function createErrorReport(_a) {
              var error = _a.error, location = _a.location, message = _a.message, navigator2 = _a.navigator, timeStamp = _a.timeStamp, type = _a.type, vyGlobal = _a.vyGlobal;
              return {
                data: {
                  // Required: body
                  // The main data being sent. It can either be a message, an exception, or a crash report.
                  body: {
                    // If this payload is a single exception, use "trace"
                    // A list of stack frames, ordered such that the most recent call is last in the list.
                    trace: {
                      // Required: exception
                      // An object describing the exception instance.
                      exception: {
                        // Required: class
                        // The exception class name.
                        class: error.name,
                        // Optional: message
                        // The exception message, as a string
                        message
                      },
                      // Each frame is an object.
                      frames: error_stack_parser["parse"](error).map(function(frame) {
                        return {
                          // Optional: code
                          // The line of code
                          code: frame.source,
                          // Optional: colno
                          // The column number as an integer
                          colno: frame.columnNumber,
                          // Required: filename
                          // The filename including its full path.
                          filename: frame.fileName,
                          // Optional: colno
                          // The column number as an integer
                          lineno: frame.lineNumber,
                          // Optional: method
                          // The method or function name
                          method: frame.functionName
                        };
                      })
                    }
                  },
                  // Optional: client
                  // Data about the client device this event occurred on.
                  // As there can be multiple client environments for a given event (i.e. Flash running inside
                  // an HTML page), data should be namespaced by platform.
                  client: {
                    // Can contain any arbitrary keys. Rollbar understands the following:
                    // Optional: cpu
                    // A string up to 255 characters
                    cpu: navigator2.platform,
                    javascript: {
                      // Optional: browser
                      // The user agent string
                      browser: navigator2.userAgent,
                      // Optional: guess_uncaught_frames
                      // Set to true to enable frame guessing
                      // See the "Source Maps" guide for more details.
                      guess_uncaught_frames: true,
                      // Optional: source_map_enabled
                      // Set to true to enable source map deobfuscation
                      // See the "Source Maps" guide for more details.
                      source_map_enabled: true
                    }
                  },
                  // Optional: code_version
                  // A string, up to 40 characters, describing the version of the application code
                  // Rollbar understands these formats:
                  // - semantic version (i.e. "2.1.12")
                  // - integer (i.e. "45")
                  // - git SHA (i.e. "3da541559918a808c2402bba5012f6c60b27661c")
                  code_version: VERSION,
                  // Optional: custom
                  // Any arbitrary metadata you want to send. "custom" itself should be an object.
                  custom: {
                    jsonpRequests: Object.keys(vyGlobal.jsonp),
                    playbackUrlOverride: window.VIDYARD_PLAYBACK_URL,
                    players: vyGlobal.players.map(function(player) {
                      return {
                        iframe: player.iframe ? { src: player.iframe.src } : {},
                        metadata: player.metadata,
                        org: player.org ? { id: player.org.id, foundIntegrations: player.org.foundIntegrations } : {},
                        uuid: player.uuid
                      };
                    }),
                    preloadLinks: vyGlobal.preloadLinks
                  },
                  // Required: environment
                  // The name of the environment in which this occurrence was seen.
                  // A string up to 255 characters. For best results, use "production" or "prod" for your
                  // production environment.
                  // You don't need to configure anything in the Rollbar UI for new environment names;
                  // we'll detect them automatically.
                  environment: getPlaybackURL(),
                  // Optional: fingerprint
                  // A string controlling how this occurrence should be grouped. Occurrences with the same
                  // fingerprint are grouped together. See the "Grouping" guide for more information.
                  // Should be a string up to 40 characters long; if longer than 40 characters, we'll use its SHA1 hash.
                  // If omitted, we'll determine this on the backend.
                  fingerprint: error.name,
                  // Optional: language
                  // The name of the language your code is written in.
                  // This can affect the order of the frames in the stack trace. The following languages set the most
                  // recent call first - 'ruby', 'javascript', 'php', 'java', 'objective-c', 'lua'
                  // It will also change the way the individual frames are displayed, with what is most consistent with
                  // users of the language.
                  language: "javascript",
                  // Optional: level
                  // The severity level. One of: "critical", "error", "warning", "info", "debug"
                  // Defaults to "error" for exceptions and "info" for messages.
                  // The level of the *first* occurrence of an item is used as the item's level.
                  level: type,
                  // Optional: platform
                  // The platform on which this occurred. Meaningful platform names:
                  // "browser", "android", "ios", "flash", "client", "heroku", "google-app-engine"
                  // If this is a client-side event, be sure to specify the platform and use a post_client_item access token.
                  platform: "browser",
                  // Optional: request
                  // Data about the request this event occurred in.
                  // Can contain any arbitrary keys. Rollbar understands the following:
                  // query_string: the raw query string
                  // url: full URL where this event occurred
                  request: { query_string: location.search, url: location.href },
                  // Optional: timestamp
                  // When this occurred, as a unix timestamp.
                  timestamp: timeStamp
                }
              };
            }
            var vyError = function(source) {
              if (source === void 0) {
                source = "";
              }
              return source.match(ERROR_ORIGIN_RE);
            };
            var errorHandler = function(_a) {
              var error = _a.error, filename = _a.filename, message = _a.message, timeStamp = _a.timeStamp, type = _a.type;
              if (vyError(filename)) {
                var location_1 = window.location, navigator_1 = window.navigator, vyGlobal = window.VidyardV4;
                var payload = createErrorReport({
                  error,
                  location: location_1,
                  message,
                  navigator: navigator_1,
                  timeStamp,
                  type,
                  vyGlobal
                });
                xhrRequest({ endpoint: getErrorURL(), method: "POST", payload }).then(function(res) {
                  return embed_helpers_log("Error logged " + res);
                }, function(e) {
                  return embed_helpers_log("Error log failed " + e);
                });
              }
            };
            function logErrors() {
              addListener("error", "onerror", errorHandler, window);
              addListener("unhandledrejection", "", function(e) {
                var error = e.reason, timeStamp = e.timeStamp, type = e.type;
                if (e.reason instanceof Error && vyError(error.stack)) {
                  e.preventDefault();
                  errorHandler({
                    error,
                    // PromiseRejectionEvents do not have a filename field
                    // the workaround is to look for the v4.js script in the stack trace
                    filename: error.stack,
                    message: error.message,
                    timeStamp,
                    type
                  });
                }
              });
            }
            __webpack_require__.d(__webpack_exports__, "_debug", function() {
              return _debug;
            });
            __webpack_require__.d(__webpack_exports__, "api", function() {
              return index_module_api;
            });
            __webpack_require__.d(__webpack_exports__, "players", function() {
              return index_module_players;
            });
            logErrors();
            window.VidyardV4 = window.VidyardV4 || vidyard_v4_global;
            window.Vidyard = window.Vidyard || vidyard_global;
            dispatch_ready();
            var _debug = vidyard_v4_global._debug, index_module_api = vidyard_v4_global.api, index_module_players = vidyard_v4_global.players;
            var index_module = __webpack_exports__["default"] = vidyard_v4_global;
          },
          /* 7 */
          /***/
          function(module3, exports2, __webpack_require__) {
            var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
            (function(root, factory) {
              "use strict";
              if (true) {
                !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function" ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports2, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== void 0 && (module3.exports = __WEBPACK_AMD_DEFINE_RESULT__));
              } else {
              }
            })(this, function() {
              "use strict";
              function _isNumber(n) {
                return !isNaN(parseFloat(n)) && isFinite(n);
              }
              function _capitalize(str) {
                return str.charAt(0).toUpperCase() + str.substring(1);
              }
              function _getter(p) {
                return function() {
                  return this[p];
                };
              }
              var booleanProps = ["isConstructor", "isEval", "isNative", "isToplevel"];
              var numericProps = ["columnNumber", "lineNumber"];
              var stringProps = ["fileName", "functionName", "source"];
              var arrayProps = ["args"];
              var props = booleanProps.concat(numericProps, stringProps, arrayProps);
              function StackFrame(obj) {
                if (obj instanceof Object) {
                  for (var i2 = 0; i2 < props.length; i2++) {
                    if (obj.hasOwnProperty(props[i2]) && obj[props[i2]] !== void 0) {
                      this["set" + _capitalize(props[i2])](obj[props[i2]]);
                    }
                  }
                }
              }
              StackFrame.prototype = {
                getArgs: function() {
                  return this.args;
                },
                setArgs: function(v) {
                  if (Object.prototype.toString.call(v) !== "[object Array]") {
                    throw new TypeError("Args must be an Array");
                  }
                  this.args = v;
                },
                getEvalOrigin: function() {
                  return this.evalOrigin;
                },
                setEvalOrigin: function(v) {
                  if (v instanceof StackFrame) {
                    this.evalOrigin = v;
                  } else if (v instanceof Object) {
                    this.evalOrigin = new StackFrame(v);
                  } else {
                    throw new TypeError("Eval Origin must be an Object or StackFrame");
                  }
                },
                toString: function() {
                  var functionName = this.getFunctionName() || "{anonymous}";
                  var args = "(" + (this.getArgs() || []).join(",") + ")";
                  var fileName = this.getFileName() ? "@" + this.getFileName() : "";
                  var lineNumber = _isNumber(this.getLineNumber()) ? ":" + this.getLineNumber() : "";
                  var columnNumber = _isNumber(this.getColumnNumber()) ? ":" + this.getColumnNumber() : "";
                  return functionName + args + fileName + lineNumber + columnNumber;
                }
              };
              for (var i = 0; i < booleanProps.length; i++) {
                StackFrame.prototype["get" + _capitalize(booleanProps[i])] = _getter(booleanProps[i]);
                StackFrame.prototype["set" + _capitalize(booleanProps[i])] = function(p) {
                  return function(v) {
                    this[p] = Boolean(v);
                  };
                }(booleanProps[i]);
              }
              for (var j = 0; j < numericProps.length; j++) {
                StackFrame.prototype["get" + _capitalize(numericProps[j])] = _getter(numericProps[j]);
                StackFrame.prototype["set" + _capitalize(numericProps[j])] = function(p) {
                  return function(v) {
                    if (!_isNumber(v)) {
                      throw new TypeError(p + " must be a Number");
                    }
                    this[p] = Number(v);
                  };
                }(numericProps[j]);
              }
              for (var k = 0; k < stringProps.length; k++) {
                StackFrame.prototype["get" + _capitalize(stringProps[k])] = _getter(stringProps[k]);
                StackFrame.prototype["set" + _capitalize(stringProps[k])] = function(p) {
                  return function(v) {
                    this[p] = String(v);
                  };
                }(stringProps[k]);
              }
              return StackFrame;
            });
          },
          /* 8 */
          /***/
          function(module3, exports2) {
            module3.exports = function(css) {
              var location = typeof window !== "undefined" && window.location;
              if (!location) {
                throw new Error("fixUrls requires window.location");
              }
              if (!css || typeof css !== "string") {
                return css;
              }
              var baseUrl = location.protocol + "//" + location.host;
              var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");
              var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
                var unquotedOrigUrl = origUrl.trim().replace(/^"(.*)"$/, function(o, $1) {
                  return $1;
                }).replace(/^'(.*)'$/, function(o, $1) {
                  return $1;
                });
                if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
                  return fullMatch;
                }
                var newUrl;
                if (unquotedOrigUrl.indexOf("//") === 0) {
                  newUrl = unquotedOrigUrl;
                } else if (unquotedOrigUrl.indexOf("/") === 0) {
                  newUrl = baseUrl + unquotedOrigUrl;
                } else {
                  newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, "");
                }
                return "url(" + JSON.stringify(newUrl) + ")";
              });
              return fixedCss;
            };
          },
          /* 9 */
          /***/
          function(module3, exports2, __webpack_require__) {
            var stylesInDom = {};
            var memoize = function(fn) {
              var memo;
              return function() {
                if (typeof memo === "undefined")
                  memo = fn.apply(this, arguments);
                return memo;
              };
            };
            var isOldIE = memoize(function() {
              return window && document && document.all && !window.atob;
            });
            var getTarget = function(target) {
              return document.querySelector(target);
            };
            var getElement = function(fn) {
              var memo = {};
              return function(target) {
                if (typeof target === "function") {
                  return target();
                }
                if (typeof memo[target] === "undefined") {
                  var styleTarget = getTarget.call(this, target);
                  if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
                    try {
                      styleTarget = styleTarget.contentDocument.head;
                    } catch (e) {
                      styleTarget = null;
                    }
                  }
                  memo[target] = styleTarget;
                }
                return memo[target];
              };
            }();
            var singleton = null;
            var singletonCounter = 0;
            var stylesInsertedAtTop = [];
            var fixUrls = __webpack_require__(8);
            module3.exports = function(list, options) {
              if (typeof DEBUG !== "undefined" && DEBUG) {
                if (typeof document !== "object")
                  throw new Error("The style-loader cannot be used in a non-browser environment");
              }
              options = options || {};
              options.attrs = typeof options.attrs === "object" ? options.attrs : {};
              if (!options.singleton && typeof options.singleton !== "boolean")
                options.singleton = isOldIE();
              if (!options.insertInto)
                options.insertInto = "head";
              if (!options.insertAt)
                options.insertAt = "bottom";
              var styles = listToStyles(list, options);
              addStylesToDom(styles, options);
              return function update(newList) {
                var mayRemove = [];
                for (var i = 0; i < styles.length; i++) {
                  var item = styles[i];
                  var domStyle = stylesInDom[item.id];
                  domStyle.refs--;
                  mayRemove.push(domStyle);
                }
                if (newList) {
                  var newStyles = listToStyles(newList, options);
                  addStylesToDom(newStyles, options);
                }
                for (var i = 0; i < mayRemove.length; i++) {
                  var domStyle = mayRemove[i];
                  if (domStyle.refs === 0) {
                    for (var j = 0; j < domStyle.parts.length; j++)
                      domStyle.parts[j]();
                    delete stylesInDom[domStyle.id];
                  }
                }
              };
            };
            function addStylesToDom(styles, options) {
              for (var i = 0; i < styles.length; i++) {
                var item = styles[i];
                var domStyle = stylesInDom[item.id];
                if (domStyle) {
                  domStyle.refs++;
                  for (var j = 0; j < domStyle.parts.length; j++) {
                    domStyle.parts[j](item.parts[j]);
                  }
                  for (; j < item.parts.length; j++) {
                    domStyle.parts.push(addStyle(item.parts[j], options));
                  }
                } else {
                  var parts = [];
                  for (var j = 0; j < item.parts.length; j++) {
                    parts.push(addStyle(item.parts[j], options));
                  }
                  stylesInDom[item.id] = { id: item.id, refs: 1, parts };
                }
              }
            }
            function listToStyles(list, options) {
              var styles = [];
              var newStyles = {};
              for (var i = 0; i < list.length; i++) {
                var item = list[i];
                var id = options.base ? item[0] + options.base : item[0];
                var css = item[1];
                var media = item[2];
                var sourceMap = item[3];
                var part = { css, media, sourceMap };
                if (!newStyles[id])
                  styles.push(newStyles[id] = { id, parts: [part] });
                else
                  newStyles[id].parts.push(part);
              }
              return styles;
            }
            function insertStyleElement(options, style) {
              var target = getElement(options.insertInto);
              if (!target) {
                throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
              }
              var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];
              if (options.insertAt === "top") {
                if (!lastStyleElementInsertedAtTop) {
                  target.insertBefore(style, target.firstChild);
                } else if (lastStyleElementInsertedAtTop.nextSibling) {
                  target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
                } else {
                  target.appendChild(style);
                }
                stylesInsertedAtTop.push(style);
              } else if (options.insertAt === "bottom") {
                target.appendChild(style);
              } else if (typeof options.insertAt === "object" && options.insertAt.before) {
                var nextSibling = getElement(options.insertInto + " " + options.insertAt.before);
                target.insertBefore(style, nextSibling);
              } else {
                throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
              }
            }
            function removeStyleElement(style) {
              if (style.parentNode === null)
                return false;
              style.parentNode.removeChild(style);
              var idx = stylesInsertedAtTop.indexOf(style);
              if (idx >= 0) {
                stylesInsertedAtTop.splice(idx, 1);
              }
            }
            function createStyleElement(options) {
              var style = document.createElement("style");
              if (options.attrs.type === void 0) {
                options.attrs.type = "text/css";
              }
              addAttrs(style, options.attrs);
              insertStyleElement(options, style);
              return style;
            }
            function createLinkElement(options) {
              var link = document.createElement("link");
              if (options.attrs.type === void 0) {
                options.attrs.type = "text/css";
              }
              options.attrs.rel = "stylesheet";
              addAttrs(link, options.attrs);
              insertStyleElement(options, link);
              return link;
            }
            function addAttrs(el, attrs) {
              Object.keys(attrs).forEach(function(key) {
                el.setAttribute(key, attrs[key]);
              });
            }
            function addStyle(obj, options) {
              var style, update, remove, result;
              if (options.transform && obj.css) {
                result = options.transform(obj.css);
                if (result) {
                  obj.css = result;
                } else {
                  return function() {
                  };
                }
              }
              if (options.singleton) {
                var styleIndex = singletonCounter++;
                style = singleton || (singleton = createStyleElement(options));
                update = applyToSingletonTag.bind(null, style, styleIndex, false);
                remove = applyToSingletonTag.bind(null, style, styleIndex, true);
              } else if (obj.sourceMap && typeof URL === "function" && typeof URL.createObjectURL === "function" && typeof URL.revokeObjectURL === "function" && typeof Blob === "function" && typeof btoa === "function") {
                style = createLinkElement(options);
                update = updateLink.bind(null, style, options);
                remove = function() {
                  removeStyleElement(style);
                  if (style.href)
                    URL.revokeObjectURL(style.href);
                };
              } else {
                style = createStyleElement(options);
                update = applyToTag.bind(null, style);
                remove = function() {
                  removeStyleElement(style);
                };
              }
              update(obj);
              return function updateStyle(newObj) {
                if (newObj) {
                  if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
                    return;
                  }
                  update(obj = newObj);
                } else {
                  remove();
                }
              };
            }
            var replaceText = function() {
              var textStore = [];
              return function(index, replacement) {
                textStore[index] = replacement;
                return textStore.filter(Boolean).join("\n");
              };
            }();
            function applyToSingletonTag(style, index, remove, obj) {
              var css = remove ? "" : obj.css;
              if (style.styleSheet) {
                style.styleSheet.cssText = replaceText(index, css);
              } else {
                var cssNode = document.createTextNode(css);
                var childNodes = style.childNodes;
                if (childNodes[index])
                  style.removeChild(childNodes[index]);
                if (childNodes.length) {
                  style.insertBefore(cssNode, childNodes[index]);
                } else {
                  style.appendChild(cssNode);
                }
              }
            }
            function applyToTag(style, obj) {
              var css = obj.css;
              var media = obj.media;
              if (media) {
                style.setAttribute("media", media);
              }
              if (style.styleSheet) {
                style.styleSheet.cssText = css;
              } else {
                while (style.firstChild) {
                  style.removeChild(style.firstChild);
                }
                style.appendChild(document.createTextNode(css));
              }
            }
            function updateLink(link, options, obj) {
              var css = obj.css;
              var sourceMap = obj.sourceMap;
              var autoFixUrls = options.convertToAbsoluteUrls === void 0 && sourceMap;
              if (options.convertToAbsoluteUrls || autoFixUrls) {
                css = fixUrls(css);
              }
              if (sourceMap) {
                css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
              }
              var blob = new Blob([css], { type: "text/css" });
              var oldSrc = link.href;
              link.href = URL.createObjectURL(blob);
              if (oldSrc)
                URL.revokeObjectURL(oldSrc);
            }
          },
          /* 10 */
          /***/
          function(module3, exports2) {
            module3.exports = function(useSourceMap) {
              var list = [];
              list.toString = function toString() {
                return this.map(function(item) {
                  var content = cssWithMappingToString(item, useSourceMap);
                  if (item[2]) {
                    return "@media " + item[2] + "{" + content + "}";
                  } else {
                    return content;
                  }
                }).join("");
              };
              list.i = function(modules, mediaQuery) {
                if (typeof modules === "string")
                  modules = [[null, modules, ""]];
                var alreadyImportedModules = {};
                for (var i = 0; i < this.length; i++) {
                  var id = this[i][0];
                  if (typeof id === "number")
                    alreadyImportedModules[id] = true;
                }
                for (i = 0; i < modules.length; i++) {
                  var item = modules[i];
                  if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
                    if (mediaQuery && !item[2]) {
                      item[2] = mediaQuery;
                    } else if (mediaQuery) {
                      item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
                    }
                    list.push(item);
                  }
                }
              };
              return list;
            };
            function cssWithMappingToString(item, useSourceMap) {
              var content = item[1] || "";
              var cssMapping = item[3];
              if (!cssMapping) {
                return content;
              }
              if (useSourceMap && typeof btoa === "function") {
                var sourceMapping = toComment(cssMapping);
                var sourceURLs = cssMapping.sources.map(function(source) {
                  return "/*# sourceURL=" + cssMapping.sourceRoot + source + " */";
                });
                return [content].concat(sourceURLs).concat([sourceMapping]).join("\n");
              }
              return [content].join("\n");
            }
            function toComment(sourceMap) {
              var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
              var data = "sourceMappingURL=data:application/json;charset=utf-8;base64," + base64;
              return "/*# " + data + " */";
            }
          },
          /* 11 */
          /***/
          function(module3, exports2, __webpack_require__) {
            exports2 = module3.exports = __webpack_require__(10)(false);
            exports2.push([module3.i, '.vidyard-player-container .play-button{position:absolute;width:16%;height:auto;border-radius:50%;border:none;cursor:pointer;opacity:.65;filter:alpha(opacity = 65);transition:opacity .2s linear;overflow:hidden;font-size:0;padding:0;min-width:20px;top:50%;left:50%;transform:translate(-50%,-50%);-webkit-appearance:initial!important;-moz-appearance:initial!important;appearance:initial!important}.vidyard-player-container .play-button .play-button-size{padding-top:100%;width:100%}.vidyard-player-container .play-button .arrow-size{position:absolute;top:50%;left:50%;width:35%;height:auto;margin:-25% 0 0 -12%;overflow:hidden}.vidyard-player-container .play-button .arrow-size-ratio{padding-top:150%;width:100%}.vidyard-player-container .play-button .arrow{position:absolute;top:50%;left:auto;right:0;bottom:auto;width:0;height:0;margin:-200px 0 -200px -300px;border:200px solid transparent;border-left:300px solid #fff;border-right:none}.vidyard-lightbox-thumbnail:hover .play-button{opacity:1;filter:alpha(opacity = 100);zoom:1}.vidyard-player-container{position:relative;height:100%;text-align:center}.vidyard-player-container img{height:100%}.vidyard-player-container .play-button{display:none}.vidyard-close-container{position:fixed;right:20px;top:20px;height:34px;width:34px;cursor:pointer;z-index:1000}.vidyard-close-container:focus{outline:1px dotted grey}.vidyard-close-x{position:absolute;height:100%;width:100%;color:#fff;font-size:2em;text-align:center;line-height:34px}.vidyard-close-x:hover{color:#ddd}.vidyard-close-x:hover:after,.vidyard-close-x:hover:before{background:#ddd}.vidyard-close-x:after,.vidyard-close-x:before{content:"";position:absolute;background:#fff;display:block;left:50%;top:50%;height:65%;width:2px;transition:all .2s;-ms-high-contrast-adjust:none}.vidyard-close-x:before{transform:translate(-50%,-50%) rotate(45deg);-ms-transform:translate(-50%,-50%) rotate(45deg)}.vidyard-close-x:after{transform:translate(-50%,-50%) rotate(-45deg);-ms-transform:translate(-50%,-50%) rotate(-45deg)}.vidyard-close-x.simple-close:after,.vidyard-close-x.simple-close:before{display:none}.vidyard-lightbox-thumbnail{width:100%;height:100%;margin:auto}.vidyard-lightbox-image{height:100%;left:0;position:absolute;top:0;width:100%}.vidyard-lightbox-centering{cursor:pointer;height:0;max-width:100%;overflow:hidden;padding-bottom:56.25%;position:relative}.vidyard-lightbox-content-backer{-webkit-transform:opacity 1s,filter 1s;-ms-transform:opacity 1s,filter 1s;transition:opacity 1s,filter 1s;background-color:#000;height:100%;width:100%;position:absolute}#vidyard-overlay-wrapper,.vidyard-lightbox-content-backer{filter:alpha(opacity = 0);opacity:0;top:0;right:0;bottom:0;left:0}#vidyard-overlay-wrapper{position:relative;box-sizing:border-box;display:none;transition:opacity .5s,filter .5s}#vidyard-overlay{top:0;right:0;bottom:0;left:0;opacity:.9;filter:alpha(opacity = 90);width:100%;height:100%;background-color:#000;z-index:800}#vidyard-content-fixed,#vidyard-overlay{position:fixed;box-sizing:border-box;display:none}#vidyard-content-fixed{opacity:1;z-index:900;text-align:center;top:5%;right:5%;bottom:5%;left:5%;width:90%}#vidyard-popbox{display:inline-block;position:absolute;left:50%;top:50%;-webit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}#vidyard-popbox-constraint{opacity:0;filter:alpha(opacity = 0);display:block;visibility:hidden}#vidyard-popbox-constraint.landscape{height:90vh}#vidyard-popbox-constraint.portrait{width:90vw}.vidyard-player-container div[class^=vidyard-iframe-]{z-index:1}.vidyard-player-container div[class^=vidyard-div-]{background-repeat:no-repeat;background-position:0 50%;background-size:100%}img.vidyard-player-embed{width:100%}img.vidyard-player-embed.inserted{position:absolute;top:0;left:0;z-index:0;max-width:100%!important}.vidyard-player-container.playlist-open{padding-right:319px;width:auto!important}.vidyard-player-container.playlist-open div[class^=vidyard-div-]{width:calc(100% + 319px);max-width:calc(100% + 319px)!important;background-size:calc(100% - 319px);background-color:#f5f9ff}.vidyard-player-container.playlist-open div[class^=vidyard-div-] img.vidyard-player-embed{width:calc(100% - 319px)!important}#backlink-icon{height:15px;width:15px;margin-right:6px;transition:.3s}#backlink{align-items:center;border-radius:4px;border:3px solid #ebeeff;display:inline-block;float:left;line-height:18px;margin:8px 0 0;outline:none;padding:1px 8px 1px 5px;position:relative;*zoom:1;font-family:Arial,Helvetica Neue,Helvetica,sans-serif;font-style:normal;font-weight:400;font-size:12px;text-decoration:none}#backlink:after,#backlink:before{content:" ";display:table}#backlink:after{clear:both}#backlink:link,#backlink:visited{background:#ebeeff;border-color:#ebeeff;color:#414dd4}#backlink:hover{background:#bfc2ff;color:#1b1a82;cursor:pointer}#backlink:focus,#backlink:hover{border-color:#bfc2ff}#backlink:active{background:#8f97ff;border-color:#8f97ff;color:#0c084d}#backlink-icon{float:left;height:18px;margin-right:5px;position:relative;width:18px}#backlink-text{float:left}', ""]);
          },
          /* 12 */
          /***/
          function(module3, exports2, __webpack_require__) {
            var content = __webpack_require__(11);
            if (typeof content === "string")
              content = [[module3.i, content, ""]];
            var transform;
            var insertInto;
            var options = { "hmr": true };
            options.transform = transform;
            options.insertInto = void 0;
            var update = __webpack_require__(9)(content, options);
            if (content.locals)
              module3.exports = content.locals;
            if (false) {
            }
          },
          /* 13 */
          /***/
          function(module3, exports2, __webpack_require__) {
            "use strict";
            var filterAncestor = function filterAncestor2(item) {
              return item.nodeType === 1 && item.tagName.toLowerCase() !== "body" && item.tagName.toLowerCase() !== "html";
            };
            var filterSibling = function filterSibling2(item) {
              return item.nodeType === 1 && item.tagName.toLowerCase() !== "script";
            };
            var flattenArrays = function flattenArrays2(a, b) {
              return a.concat(b);
            };
            function getPreviousSiblings(el) {
              var siblings = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
              var previousSibling = el.previousSibling;
              if (!previousSibling) {
                return siblings;
              }
              siblings.push(previousSibling);
              return getPreviousSiblings(previousSibling, siblings);
            }
            function getNextSiblings(el) {
              var siblings = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
              var nextSibling = el.nextSibling;
              if (!nextSibling) {
                return siblings;
              }
              siblings.push(nextSibling);
              return getNextSiblings(nextSibling, siblings);
            }
            function getSiblings(el) {
              var allSiblings = getPreviousSiblings(el).concat(getNextSiblings(el));
              return allSiblings.filter(filterSibling);
            }
            function getAllAncestors(el) {
              var ancestors = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
              var nextAncestor = el.parentNode;
              if (!nextAncestor) {
                return ancestors;
              }
              ancestors.push(nextAncestor);
              return getAllAncestors(nextAncestor, ancestors);
            }
            function getAncestors(el) {
              return getAllAncestors(el).filter(filterAncestor);
            }
            function getSiblingsOfAncestors(el) {
              return getAncestors(el).map(function(item) {
                return getSiblings(item);
              }).reduce(flattenArrays, []);
            }
            module3.exports = {
              getSiblings,
              getAncestors,
              getSiblingsOfAncestors
            };
          },
          /* 14 */
          /***/
          function(module3, exports2, __webpack_require__) {
            (function(global) {
              var NativeCustomEvent = global.CustomEvent;
              function useNative() {
                try {
                  var p = new NativeCustomEvent("cat", { detail: { foo: "bar" } });
                  return "cat" === p.type && "bar" === p.detail.foo;
                } catch (e) {
                }
                return false;
              }
              module3.exports = useNative() ? NativeCustomEvent : (
                // IE >= 9
                "undefined" !== typeof document && "function" === typeof document.createEvent ? function CustomEvent2(type, params) {
                  var e = document.createEvent("CustomEvent");
                  if (params) {
                    e.initCustomEvent(type, params.bubbles, params.cancelable, params.detail);
                  } else {
                    e.initCustomEvent(type, false, false, void 0);
                  }
                  return e;
                } : (
                  // IE <= 8
                  function CustomEvent2(type, params) {
                    var e = document.createEventObject();
                    e.type = type;
                    if (params) {
                      e.bubbles = Boolean(params.bubbles);
                      e.cancelable = Boolean(params.cancelable);
                      e.detail = params.detail;
                    } else {
                      e.bubbles = false;
                      e.cancelable = false;
                      e.detail = void 0;
                    }
                    return e;
                  }
                )
              );
            }).call(this, __webpack_require__(0));
          },
          ,
          /* 16 */
          /***/
          function(module3, exports2) {
            var process = module3.exports = {};
            var cachedSetTimeout;
            var cachedClearTimeout;
            function defaultSetTimout() {
              throw new Error("setTimeout has not been defined");
            }
            function defaultClearTimeout() {
              throw new Error("clearTimeout has not been defined");
            }
            (function() {
              try {
                if (typeof setTimeout === "function") {
                  cachedSetTimeout = setTimeout;
                } else {
                  cachedSetTimeout = defaultSetTimout;
                }
              } catch (e) {
                cachedSetTimeout = defaultSetTimout;
              }
              try {
                if (typeof clearTimeout === "function") {
                  cachedClearTimeout = clearTimeout;
                } else {
                  cachedClearTimeout = defaultClearTimeout;
                }
              } catch (e) {
                cachedClearTimeout = defaultClearTimeout;
              }
            })();
            function runTimeout(fun) {
              if (cachedSetTimeout === setTimeout) {
                return setTimeout(fun, 0);
              }
              if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                cachedSetTimeout = setTimeout;
                return setTimeout(fun, 0);
              }
              try {
                return cachedSetTimeout(fun, 0);
              } catch (e) {
                try {
                  return cachedSetTimeout.call(null, fun, 0);
                } catch (e2) {
                  return cachedSetTimeout.call(this, fun, 0);
                }
              }
            }
            function runClearTimeout(marker) {
              if (cachedClearTimeout === clearTimeout) {
                return clearTimeout(marker);
              }
              if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                cachedClearTimeout = clearTimeout;
                return clearTimeout(marker);
              }
              try {
                return cachedClearTimeout(marker);
              } catch (e) {
                try {
                  return cachedClearTimeout.call(null, marker);
                } catch (e2) {
                  return cachedClearTimeout.call(this, marker);
                }
              }
            }
            var queue = [];
            var draining = false;
            var currentQueue;
            var queueIndex = -1;
            function cleanUpNextTick() {
              if (!draining || !currentQueue) {
                return;
              }
              draining = false;
              if (currentQueue.length) {
                queue = currentQueue.concat(queue);
              } else {
                queueIndex = -1;
              }
              if (queue.length) {
                drainQueue();
              }
            }
            function drainQueue() {
              if (draining) {
                return;
              }
              var timeout = runTimeout(cleanUpNextTick);
              draining = true;
              var len = queue.length;
              while (len) {
                currentQueue = queue;
                queue = [];
                while (++queueIndex < len) {
                  if (currentQueue) {
                    currentQueue[queueIndex].run();
                  }
                }
                queueIndex = -1;
                len = queue.length;
              }
              currentQueue = null;
              draining = false;
              runClearTimeout(timeout);
            }
            process.nextTick = function(fun) {
              var args = new Array(arguments.length - 1);
              if (arguments.length > 1) {
                for (var i = 1; i < arguments.length; i++) {
                  args[i - 1] = arguments[i];
                }
              }
              queue.push(new Item(fun, args));
              if (queue.length === 1 && !draining) {
                runTimeout(drainQueue);
              }
            };
            function Item(fun, array) {
              this.fun = fun;
              this.array = array;
            }
            Item.prototype.run = function() {
              this.fun.apply(null, this.array);
            };
            process.title = "browser";
            process.browser = true;
            process.env = {};
            process.argv = [];
            process.version = "";
            process.versions = {};
            function noop() {
            }
            process.on = noop;
            process.addListener = noop;
            process.once = noop;
            process.off = noop;
            process.removeListener = noop;
            process.removeAllListeners = noop;
            process.emit = noop;
            process.prependListener = noop;
            process.prependOnceListener = noop;
            process.listeners = function(name) {
              return [];
            };
            process.binding = function(name) {
              throw new Error("process.binding is not supported");
            };
            process.cwd = function() {
              return "/";
            };
            process.chdir = function(dir) {
              throw new Error("process.chdir is not supported");
            };
            process.umask = function() {
              return 0;
            };
          },
          /* 17 */
          /***/
          function(module3, exports2, __webpack_require__) {
            (function(global, process) {
              (function(global2, undefined2) {
                "use strict";
                if (global2.setImmediate) {
                  return;
                }
                var nextHandle = 1;
                var tasksByHandle = {};
                var currentlyRunningATask = false;
                var doc = global2.document;
                var registerImmediate;
                function setImmediate(callback) {
                  if (typeof callback !== "function") {
                    callback = new Function("" + callback);
                  }
                  var args = new Array(arguments.length - 1);
                  for (var i = 0; i < args.length; i++) {
                    args[i] = arguments[i + 1];
                  }
                  var task = { callback, args };
                  tasksByHandle[nextHandle] = task;
                  registerImmediate(nextHandle);
                  return nextHandle++;
                }
                function clearImmediate(handle) {
                  delete tasksByHandle[handle];
                }
                function run(task) {
                  var callback = task.callback;
                  var args = task.args;
                  switch (args.length) {
                    case 0:
                      callback();
                      break;
                    case 1:
                      callback(args[0]);
                      break;
                    case 2:
                      callback(args[0], args[1]);
                      break;
                    case 3:
                      callback(args[0], args[1], args[2]);
                      break;
                    default:
                      callback.apply(undefined2, args);
                      break;
                  }
                }
                function runIfPresent(handle) {
                  if (currentlyRunningATask) {
                    setTimeout(runIfPresent, 0, handle);
                  } else {
                    var task = tasksByHandle[handle];
                    if (task) {
                      currentlyRunningATask = true;
                      try {
                        run(task);
                      } finally {
                        clearImmediate(handle);
                        currentlyRunningATask = false;
                      }
                    }
                  }
                }
                function installNextTickImplementation() {
                  registerImmediate = function(handle) {
                    process.nextTick(function() {
                      runIfPresent(handle);
                    });
                  };
                }
                function canUsePostMessage() {
                  if (global2.postMessage && !global2.importScripts) {
                    var postMessageIsAsynchronous = true;
                    var oldOnMessage = global2.onmessage;
                    global2.onmessage = function() {
                      postMessageIsAsynchronous = false;
                    };
                    global2.postMessage("", "*");
                    global2.onmessage = oldOnMessage;
                    return postMessageIsAsynchronous;
                  }
                }
                function installPostMessageImplementation() {
                  var messagePrefix = "setImmediate$" + Math.random() + "$";
                  var onGlobalMessage = function(event) {
                    if (event.source === global2 && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
                      runIfPresent(+event.data.slice(messagePrefix.length));
                    }
                  };
                  if (global2.addEventListener) {
                    global2.addEventListener("message", onGlobalMessage, false);
                  } else {
                    global2.attachEvent("onmessage", onGlobalMessage);
                  }
                  registerImmediate = function(handle) {
                    global2.postMessage(messagePrefix + handle, "*");
                  };
                }
                function installMessageChannelImplementation() {
                  var channel = new MessageChannel();
                  channel.port1.onmessage = function(event) {
                    var handle = event.data;
                    runIfPresent(handle);
                  };
                  registerImmediate = function(handle) {
                    channel.port2.postMessage(handle);
                  };
                }
                function installReadyStateChangeImplementation() {
                  var html = doc.documentElement;
                  registerImmediate = function(handle) {
                    var script = doc.createElement("script");
                    script.onreadystatechange = function() {
                      runIfPresent(handle);
                      script.onreadystatechange = null;
                      html.removeChild(script);
                      script = null;
                    };
                    html.appendChild(script);
                  };
                }
                function installSetTimeoutImplementation() {
                  registerImmediate = function(handle) {
                    setTimeout(runIfPresent, 0, handle);
                  };
                }
                var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global2);
                attachTo = attachTo && attachTo.setTimeout ? attachTo : global2;
                if ({}.toString.call(global2.process) === "[object process]") {
                  installNextTickImplementation();
                } else if (canUsePostMessage()) {
                  installPostMessageImplementation();
                } else if (global2.MessageChannel) {
                  installMessageChannelImplementation();
                } else if (doc && "onreadystatechange" in doc.createElement("script")) {
                  installReadyStateChangeImplementation();
                } else {
                  installSetTimeoutImplementation();
                }
                attachTo.setImmediate = setImmediate;
                attachTo.clearImmediate = clearImmediate;
              })(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self);
            }).call(this, __webpack_require__(0), __webpack_require__(16));
          },
          /* 18 */
          /***/
          function(module3, exports2, __webpack_require__) {
            (function(global) {
              var scope = typeof global !== "undefined" && global || typeof self !== "undefined" && self || window;
              var apply = Function.prototype.apply;
              exports2.setTimeout = function() {
                return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
              };
              exports2.setInterval = function() {
                return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
              };
              exports2.clearTimeout = exports2.clearInterval = function(timeout) {
                if (timeout) {
                  timeout.close();
                }
              };
              function Timeout(id, clearFn) {
                this._id = id;
                this._clearFn = clearFn;
              }
              Timeout.prototype.unref = Timeout.prototype.ref = function() {
              };
              Timeout.prototype.close = function() {
                this._clearFn.call(scope, this._id);
              };
              exports2.enroll = function(item, msecs) {
                clearTimeout(item._idleTimeoutId);
                item._idleTimeout = msecs;
              };
              exports2.unenroll = function(item) {
                clearTimeout(item._idleTimeoutId);
                item._idleTimeout = -1;
              };
              exports2._unrefActive = exports2.active = function(item) {
                clearTimeout(item._idleTimeoutId);
                var msecs = item._idleTimeout;
                if (msecs >= 0) {
                  item._idleTimeoutId = setTimeout(function onTimeout() {
                    if (item._onTimeout)
                      item._onTimeout();
                  }, msecs);
                }
              };
              __webpack_require__(17);
              exports2.setImmediate = typeof self !== "undefined" && self.setImmediate || typeof global !== "undefined" && global.setImmediate || this && this.setImmediate;
              exports2.clearImmediate = typeof self !== "undefined" && self.clearImmediate || typeof global !== "undefined" && global.clearImmediate || this && this.clearImmediate;
            }).call(this, __webpack_require__(0));
          }
          /******/
        ])
      );
    });
  }
});

// src/loading-spinner/loading-spinner.js
var LoadingSpinner = class extends HTMLElement {
  connectedCallback() {
    const div = document.createElement("div");
    div.classList.add("sjwc-loading-spinner");
    const icon = document.createElement("i");
    icon.classList.add("fa", "fa-spinner", "fa-spin");
    div.appendChild(icon);
    this.appendChild(div);
  }
};
if (!customElements.get("sjwc-loading-spinner")) {
  customElements.define("sjwc-loading-spinner", LoadingSpinner);
}

// src/lesson-content-item/lesson-content-item.js
var attributes = { title: "title" };
var _titleElement;
var HtmlLessonContentItem = class extends HTMLElement {
  constructor() {
    super(...arguments);
    // The customizable h3
    __privateAdd(this, _titleElement, void 0);
  }
  static get observedAttributes() {
    return Object.values(attributes);
  }
  attributeChangedCallback(name, oldVal, newVal) {
    if (oldVal === newVal)
      return;
    if (name === attributes.title) {
      this.updateTitle(oldVal, newVal);
    }
  }
  createTitle() {
    __privateSet(this, _titleElement, document.createElement("h3"));
    __privateGet(this, _titleElement).classList.add("sjwc-section-title");
    __privateGet(this, _titleElement).innerText = this.getAttribute(attributes.title);
    this.prepend(__privateGet(this, _titleElement));
  }
  updateTitle(oldTitle, newTitle) {
    if (newTitle === oldTitle)
      return;
    if (__privateGet(this, _titleElement)) {
      if (!newTitle) {
        __privateGet(this, _titleElement).remove();
        __privateSet(this, _titleElement, null);
        return;
      }
      __privateGet(this, _titleElement).innerText = newTitle;
    }
    if (newTitle && !__privateGet(this, _titleElement)) {
      this.createTitle();
    }
  }
};
_titleElement = new WeakMap();
customElements.define("sjwc-lesson-content-item", HtmlLessonContentItem);

// src/utils/helper-service.js
var HelperService = class {
  static loadScript(attributes14, $rootElement, callback) {
    const $scriptElement = this.createElement("script", attributes14);
    if (!$rootElement) {
      document.body.appendChild($scriptElement);
    } else if (!$rootElement.contains($scriptElement)) {
      $rootElement.appendChild($scriptElement);
    }
    $scriptElement.onerror = (e) => {
      throw new Error(e);
    };
    $scriptElement.onload = callback;
  }
  static createElement(tagName, attributes14, children) {
    const elem = document.createElement(tagName);
    if (attributes14) {
      const bracketNotationAttrs = ["textContent", "innerHTML", "innerText"];
      Object.keys(attributes14).forEach((key) => {
        if (bracketNotationAttrs.includes(key)) {
          elem[key] = attributes14[key];
          return;
        }
        elem.setAttribute(key, attributes14[key]);
      });
    }
    if (children) {
      children.filter((child) => !!child).forEach((child) => {
        elem.appendChild(child);
      });
    }
    return elem;
  }
  static replaceClass(node, oldClass, newClass) {
    node.classList.remove(oldClass);
    node.classList.add(newClass);
  }
  static safeDefineCustomElement(name, cls) {
    if (!customElements.get(name)) {
      customElements.define(name, cls);
    }
  }
};

// src/alert/alert.js
var _Alert = class extends HTMLElement {
  constructor() {
    super();
    document.body.addEventListener("context-request", (event) => {
      if (event.detail.type !== _Alert.CONTEXT_TYPE) {
        return;
      }
      event.stopPropagation();
      event.detail.callback({
        showAlert: this.handleShowAlert.bind(this)
      });
    });
  }
  handleShowAlert({ element, alertType }) {
    const closeIcon = HelperService.createElement("a", {
      class: "close",
      href: "#",
      innerHTML: "&times;"
    });
    const alert = HelperService.createElement("div", { class: `alert-box radius ${alertType}` }, [element, closeIcon]);
    alert.setAttribute("data-alert", "");
    if (this.childElementCount === 0) {
      alert.classList.add("top-row-message");
    }
    this.appendChild(alert);
  }
};
var Alert = _Alert;
__publicField(Alert, "CONTEXT_TYPE", "alert-service");
__publicField(Alert, "VALID_TYPES", ["success", "warning", "error", "info"]);
HelperService.safeDefineCustomElement("sjwc-alert", Alert);

// src/alert/alert-connected-html-element.js
var _alertService;
var _AlertConnectedHTMLElement = class extends HTMLElement {
  /**
   * This class should not be instantiated directly
   */
  constructor() {
    super();
    // We don't want child components directly accessing this
    __privateAdd(this, _alertService, void 0);
    if (this.constructor === _AlertConnectedHTMLElement) {
      throw new Error("Instance of Abstract class cannot be instantiated");
    }
  }
  connectedCallback() {
    this.dispatchEvent(
      new CustomEvent("context-request", {
        bubbles: true,
        composed: true,
        detail: {
          type: Alert.CONTEXT_TYPE,
          callback: (alertService) => {
            __privateSet(this, _alertService, alertService);
          }
        }
      })
    );
  }
  /**
   * Show an alert with the given options if an alert is on the page
   * @param {Object} options The options for the shown alert
   * @param {HTMLElement} options.element The element to be added as the content of the alert
   * @param {string} options.alertType The type of alert to be show as described in Alert.VALID_TYPES
   */
  showAlert({ element, alertType }) {
    if (__privateGet(this, _alertService)) {
      __privateGet(this, _alertService).showAlert({ element, alertType });
    }
  }
};
var AlertConnectedHTMLElement = _AlertConnectedHTMLElement;
_alertService = new WeakMap();

// src/icon.js
var attributes2 = {
  name: "name"
};
var _rootElement;
var Icon = class extends HTMLElement {
  constructor() {
    super();
    __privateAdd(this, _rootElement, void 0);
    __privateSet(this, _rootElement, document.createElement("i"));
    const name = this.getAttribute(attributes2.name);
    if (name) {
      __privateGet(this, _rootElement).classList.add(...name.split(" "));
    }
  }
  static get observedAttributes() {
    return Object.values(attributes2);
  }
  connectedCallback() {
    this.updateName(this.getAttribute(attributes2.name));
    this.appendChild(__privateGet(this, _rootElement));
  }
  attributeChangedCallback(name, oldValue, newValue) {
    if (name === attributes2.name) {
      this.updateName(newValue, oldValue);
    }
  }
  updateName(newValue, oldValue) {
    if (oldValue) {
      __privateGet(this, _rootElement).classList.remove(...oldValue.split(" "));
    }
    __privateGet(this, _rootElement).classList.add(...newValue.split(" "));
  }
};
_rootElement = new WeakMap();
customElements.define("sjwc-icon", Icon);

// ../../node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// ../../node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

// ../../node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// ../../node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// src/jwplayer-embed.js
var attributes3 = {
  aspectRatio: "aspect-ratio",
  playDisallowed: "play-disallowed",
  processingCopy: "processing-copy",
  errorCopy: "error-copy",
  videoId: "video-id",
  playerId: "player-id",
  token: "token"
};
var _rootElement2, _videoPlayerWrapper, _videoPlayer, _scriptElement, _videoId, _playerId, _processingCopy, _errorCopy, _isWidescreen, _videoPlayerId, _jwPlayerInstance, _token, _playDisallowed, _initialized;
var JwPlayerEmbed = class extends HTMLElement {
  constructor() {
    super(...arguments);
    __privateAdd(this, _rootElement2, void 0);
    __privateAdd(this, _videoPlayerWrapper, void 0);
    __privateAdd(this, _videoPlayer, void 0);
    __privateAdd(this, _scriptElement, void 0);
    __privateAdd(this, _videoId, void 0);
    __privateAdd(this, _playerId, void 0);
    __privateAdd(this, _processingCopy, void 0);
    __privateAdd(this, _errorCopy, void 0);
    __privateAdd(this, _isWidescreen, void 0);
    __privateAdd(this, _videoPlayerId, void 0);
    __privateAdd(this, _jwPlayerInstance, void 0);
    __privateAdd(this, _token, void 0);
    __privateAdd(this, _playDisallowed, void 0);
    __privateAdd(this, _initialized, false);
  }
  static get observedAttributes() {
    return Object.values(attributes3);
  }
  connectedCallback() {
    __privateSet(this, _videoId, this.getAttribute(attributes3.videoId));
    __privateSet(this, _playerId, this.getAttribute(attributes3.playerId));
    __privateSet(this, _token, this.getAttribute(attributes3.token));
    __privateSet(this, _isWidescreen, !this.hasAttribute(attributes3.aspectRatio) || this.getAttribute(attributes3.aspectRatio) === 1.7777777777777777);
    __privateSet(this, _playDisallowed, this.hasAttribute(attributes3.playDisallowed) && this.getAttribute(attributes3.playDisallowed) !== "false");
    this.handleVideoRender();
    this.handleVideoProcessing();
    this.handleVideoError();
    this.appendChild(__privateGet(this, _rootElement2));
  }
  disconnectedCallback() {
    __privateSet(this, _initialized, false);
    __privateGet(this, _rootElement2).remove();
  }
  attributeChangedCallback(name, oldValue, newValue) {
    if (name === attributes3.playDisallowed && !!__privateGet(this, _jwPlayerInstance)) {
      this.handlePlayDisallowed(newValue);
    }
  }
  handleVideoRender() {
    __privateSet(this, _rootElement2, document.createElement("div"));
    __privateSet(this, _videoPlayerWrapper, document.createElement("div"));
    __privateGet(this, _rootElement2).appendChild(__privateGet(this, _videoPlayerWrapper));
    __privateGet(this, _videoPlayerWrapper).classList.add("video-player", "flex-video", "sjwc-jwplayer");
    __privateGet(this, _videoPlayerWrapper).classList.toggle("widescreen", __privateGet(this, _isWidescreen));
    __privateSet(this, _videoPlayer, document.createElement("div"));
    __privateGet(this, _videoPlayer).classList.add("jwplayer");
    __privateGet(this, _videoPlayerWrapper).appendChild(__privateGet(this, _videoPlayer));
    this.updateVideoId(__privateGet(this, _videoId));
    this.handleScript();
  }
  handleVideoProcessing() {
    __privateSet(this, _processingCopy, this.getAttribute(attributes3.processingCopy) || "This video is still being processed. Please check back later and refresh the page.");
    const processingWrapper = document.createElement("div");
    processingWrapper.style.display = "none";
    processingWrapper.classList.add("video-processing", "flex-video");
    processingWrapper.classList.toggle("widescreen", __privateGet(this, _isWidescreen));
    const copyWrapper = document.createElement("div");
    const spinnerIcon = document.createElement("i");
    spinnerIcon.classList.add("fa", "fa-spinner", "fa-spin");
    const processingCopy = document.createElement("p");
    processingCopy.textContent = __privateGet(this, _processingCopy);
    copyWrapper.appendChild(spinnerIcon);
    copyWrapper.appendChild(processingCopy);
    processingWrapper.appendChild(copyWrapper);
    __privateGet(this, _rootElement2).appendChild(processingWrapper);
  }
  handleVideoError() {
    __privateSet(this, _errorCopy, this.getAttribute(attributes3.errorCopy) || "Uh oh! Something went wrong, please try again.");
    const errorWrapper = document.createElement("div");
    errorWrapper.style.display = "none";
    errorWrapper.classList.add("video-error", "flex-video");
    errorWrapper.classList.toggle("widescreen", __privateGet(this, _isWidescreen));
    const errorCopyWrapper = document.createElement("div");
    const errorCopy = document.createElement("p");
    errorCopy.textContent = __privateGet(this, _errorCopy);
    errorCopyWrapper.appendChild(errorCopy);
    errorWrapper.appendChild(errorCopyWrapper);
    __privateGet(this, _rootElement2).appendChild(errorWrapper);
  }
  updateVideoId(newVideoId) {
    __privateSet(this, _videoPlayerId, `botr_${newVideoId}_${__privateGet(this, _playerId)}_${v4_default()}_div`);
    __privateGet(this, _videoPlayer).id = __privateGet(this, _videoPlayerId);
    if (newVideoId !== __privateGet(this, _videoId)) {
      __privateSet(this, _videoId, newVideoId);
      this.handleScript();
    }
  }
  handleScript() {
    const scriptAttributes = {
      type: "text/javascript",
      src: `https://cdn.jwplayer.com/libraries/${__privateGet(this, _playerId)}.js`,
      async: true
    };
    __privateSet(this, _scriptElement, HelperService.loadScript(scriptAttributes, __privateGet(this, _rootElement2), this.setupListeners.bind(this)));
  }
  setupListeners() {
    let playlistUrl = `//cdn.jwplayer.com/v2/media/${__privateGet(this, _videoId)}`;
    if (__privateGet(this, _token)) {
      playlistUrl = `//cdn.jwplayer.com/v2/media/${__privateGet(this, _videoId)}?token=${__privateGet(this, _token)}`;
    }
    __privateSet(this, _jwPlayerInstance, jwplayer(__privateGet(this, _videoPlayerId)).setup({
      playlist: playlistUrl
    }));
    __privateGet(this, _jwPlayerInstance).on("setupError", (error) => this.handleError(error));
    __privateGet(this, _jwPlayerInstance).on("error", (error) => this.handleError(error));
    if (!__privateGet(this, _initialized))
      this.handlePlayDisallowed(__privateGet(this, _playDisallowed));
    __privateSet(this, _initialized, true);
  }
  removeListeners() {
    __privateGet(this, _jwPlayerInstance).off("setupError");
    __privateGet(this, _jwPlayerInstance).off("error");
  }
  handleError(error) {
    const hasPlaylist = typeof __privateGet(this, _jwPlayerInstance).getPlaylist() === "string";
    if (hasPlaylist || __privateGet(this, _jwPlayerInstance).getPlaylist().length === 0) {
      const videoPlayer = __privateGet(this, _rootElement2).querySelector(".video-player");
      const editCoverImage = __privateGet(this, _rootElement2).querySelector(".edit-cover-image");
      if (videoPlayer)
        videoPlayer.style.display = "none";
      if (editCoverImage)
        editCoverImage.style.display = "none";
      if (error && error.code === 102404) {
        const videoProcessing = __privateGet(this, _rootElement2).querySelector(".video-processing");
        if (videoProcessing) {
          videoProcessing.style.display = "block";
        }
      } else {
        const videoError = __privateGet(this, _rootElement2).querySelector(".video-error");
        if (videoError) {
          videoError.style.display = "block";
        }
        console.sentryCaptureException(error);
      }
    }
  }
  handlePlayDisallowed(newValue) {
    __privateSet(this, _playDisallowed, newValue);
    __privateGet(this, _jwPlayerInstance).setControls(!__privateGet(this, _playDisallowed));
    const playingWhenNotAllowed = __privateGet(this, _jwPlayerInstance).getState() === "playing" && __privateGet(this, _playDisallowed);
    if (playingWhenNotAllowed)
      __privateGet(this, _jwPlayerInstance).pause();
  }
};
_rootElement2 = new WeakMap();
_videoPlayerWrapper = new WeakMap();
_videoPlayer = new WeakMap();
_scriptElement = new WeakMap();
_videoId = new WeakMap();
_playerId = new WeakMap();
_processingCopy = new WeakMap();
_errorCopy = new WeakMap();
_isWidescreen = new WeakMap();
_videoPlayerId = new WeakMap();
_jwPlayerInstance = new WeakMap();
_token = new WeakMap();
_playDisallowed = new WeakMap();
_initialized = new WeakMap();
customElements.define("sjwc-jwplayer", JwPlayerEmbed);

// src/kaltura-embed.js
var attributes4 = { playDisallowed: "play-disallowed", videoId: "video-id" };
var extractOptionsFromVideoId = (videoId) => {
  const options = {};
  const parts = videoId.split("/");
  for (let i = 0; i < parts.length; i++) {
    const part = parts[i];
    if (part === "partner_id") {
      options.wid = `_${parts[++i].split("?")[0]}`;
    } else if (part === "uiconf_id") {
      options.uiconf_id = parts[++i];
    }
  }
  const params = new URLSearchParams(videoId);
  if (params.get("entry_id")) {
    options.entry_id = params.get("entry_id");
  }
  if (params.get("playerId")) {
    options.targetId = params.get("playerId");
  }
  const width = params.get("width") || "400";
  const height = params.get("height") || "330";
  const aspectRatio = width / height;
  return { options, width, height, aspectRatio };
};
var _rootElement3, _scriptElement2, _player, _videoId2, _videoContainer, _videoContainerId;
var KalturaPlayer = class extends HTMLElement {
  constructor() {
    super();
    __privateAdd(this, _rootElement3, void 0);
    __privateAdd(this, _scriptElement2, void 0);
    __privateAdd(this, _player, void 0);
    __privateAdd(this, _videoId2, void 0);
    __privateAdd(this, _videoContainer, void 0);
    __privateAdd(this, _videoContainerId, void 0);
    __privateSet(this, _rootElement3, document.createElement("div"));
    __privateGet(this, _rootElement3).classList.add("sjwc-kaltura-root");
    __privateSet(this, _videoContainer, document.createElement("div"));
    __privateSet(this, _videoContainerId, v4_default());
    __privateGet(this, _videoContainer).setAttribute("id", __privateGet(this, _videoContainerId));
  }
  static get observedAttributes() {
    return [attributes4.videoId, attributes4.playDisallowed];
  }
  connectedCallback() {
    __privateSet(this, _videoId2, this.getAttribute(attributes4.videoId));
    __privateSet(this, _scriptElement2, HelperService.loadScript(
      {
        src: __privateGet(this, _videoId2).split("?")
      },
      __privateGet(this, _rootElement3),
      this.initializePlayer.bind(this)
    ));
    __privateGet(this, _rootElement3).appendChild(__privateGet(this, _videoContainer));
    this.appendChild(__privateGet(this, _rootElement3));
  }
  attributeChangedCallback(name, oldValue, newValue) {
    if (name === attributes4.playDisallowed) {
      if (newValue && __privateGet(this, _player)) {
        __privateGet(this, _player).sendNotification("doPause");
      }
    }
  }
  initializePlayer() {
    const { options } = extractOptionsFromVideoId(__privateGet(this, _videoId2));
    __privateGet(this, _rootElement3).style.height = `80cqh`;
    __privateGet(this, _rootElement3).style.maxHeight = `${window.innerHeight}px`;
    __privateGet(this, _videoContainer).style.height = `80cqh`;
    __privateGet(this, _videoContainer).style.maxHeight = `${window.innerHeight}px`;
    options.targetId = __privateGet(this, _videoContainerId);
    options.readyPlayback = (playerId) => {
      __privateSet(this, _player, document.getElementById(playerId));
    };
    kWidget.embed(options);
  }
};
_rootElement3 = new WeakMap();
_scriptElement2 = new WeakMap();
_player = new WeakMap();
_videoId2 = new WeakMap();
_videoContainer = new WeakMap();
_videoContainerId = new WeakMap();
customElements.define("sjwc-kaltura", KalturaPlayer);

// src/vidyard-embed.js
var import_embed_code = __toESM(require_v4_umd());
var attributes5 = { playDisallowed: "play-disallowed", videoId: "video-id" };
var _rootElement4, _placeholderImg, _videoId3, _player2;
var VidyardPlayer = class extends HTMLElement {
  constructor() {
    super();
    __privateAdd(this, _rootElement4, void 0);
    __privateAdd(this, _placeholderImg, void 0);
    __privateAdd(this, _videoId3, void 0);
    __privateAdd(this, _player2, void 0);
    __privateSet(this, _rootElement4, document.createElement("div"));
    __privateSet(this, _placeholderImg, document.createElement("img"));
    __privateGet(this, _placeholderImg).classList.add("vidyard-player-embed");
    __privateGet(this, _placeholderImg).setAttribute("data-v", "4");
    __privateGet(this, _placeholderImg).setAttribute("data-type", "inline");
  }
  static get observedAttributes() {
    return [attributes5.videoId, attributes5.playDisallowed];
  }
  connectedCallback() {
    __privateSet(this, _videoId3, this.getAttribute(attributes5.videoId));
    __privateGet(this, _placeholderImg).setAttribute("src", `https://play.vidyard.com/${__privateGet(this, _videoId3)}.jpg`);
    __privateGet(this, _placeholderImg).setAttribute("data-uuid", __privateGet(this, _videoId3));
    __privateGet(this, _rootElement4).appendChild(__privateGet(this, _placeholderImg));
    this.appendChild(__privateGet(this, _rootElement4));
    import_embed_code.default.api.renderPlayer(__privateGet(this, _placeholderImg));
    import_embed_code.default.api.addReadyListener((_2, player) => {
      __privateSet(this, _player2, player);
    }, __privateGet(this, _videoId3));
  }
  attributeChangedCallback(name, oldValue, newValue) {
    if (name === attributes5.playDisallowed) {
      if (newValue && __privateGet(this, _player2)) {
        __privateGet(this, _player2).pause();
      }
    }
  }
};
_rootElement4 = new WeakMap();
_placeholderImg = new WeakMap();
_videoId3 = new WeakMap();
_player2 = new WeakMap();
customElements.define("sjwc-vidyard", VidyardPlayer);

// src/vimeo-embed.js
var attributes6 = {
  videoId: "video-id",
  playDisallowed: "play-disallowed"
};
var _rootElement5, _scriptElement3, _playerElement, _videoId4, _vimeoInstance, _playDisallowed2;
var VimeoEmbed = class extends HTMLElement {
  constructor() {
    super(...arguments);
    __privateAdd(this, _rootElement5, void 0);
    __privateAdd(this, _scriptElement3, void 0);
    __privateAdd(this, _playerElement, void 0);
    __privateAdd(this, _videoId4, void 0);
    __privateAdd(this, _vimeoInstance, void 0);
    __privateAdd(this, _playDisallowed2, void 0);
  }
  static get observedAttributes() {
    return Object.values(attributes6);
  }
  connectedCallback() {
    __privateSet(this, _videoId4, this.getAttribute(attributes6.videoId));
    __privateSet(this, _playDisallowed2, this.hasAttribute(attributes6.playDisallowed) && this.getAttribute(attributes6.playDisallowed) !== "false");
    __privateSet(this, _rootElement5, document.createElement("div"));
    __privateGet(this, _rootElement5).classList.add("embed-container");
    __privateSet(this, _playerElement, document.createElement("iframe"));
    const playerAttributes = {
      src: this.buildSrcUrlFromVideoId(__privateGet(this, _videoId4)),
      width: "WIDTH",
      height: "HEIGHT",
      frameborder: "0",
      webkitallowfullscreen: "",
      mozallowfullscreen: "",
      allowfullscreen: ""
    };
    Object.keys(playerAttributes).forEach((attr) => __privateGet(this, _playerElement).setAttribute(attr, playerAttributes[attr]));
    __privateSet(this, _scriptElement3, HelperService.loadScript(
      {
        src: "https://player.vimeo.com/api/player.js"
      },
      __privateGet(this, _rootElement5),
      this.instantiateInstance.bind(this)
    ));
    __privateGet(this, _rootElement5).appendChild(__privateGet(this, _playerElement));
    this.appendChild(__privateGet(this, _rootElement5));
  }
  attributeChangedCallback(name, oldValue, newValue) {
    if (name === attributes6.playDisallowed && !!__privateGet(this, _vimeoInstance)) {
      this.handlePlayDisallowed(newValue);
    }
  }
  buildSrcUrlFromVideoId(externalId) {
    const parts = externalId.split("/");
    const videoId = parts[0].split("?")[0];
    const securityHash = parts[1] ? parts[1].split("?")[0] : "";
    let srcUrl = `//player.vimeo.com/video/${videoId}/?portrait=0&title=0&byline=0&badge=0`;
    if (securityHash) {
      srcUrl = `//player.vimeo.com/video/${videoId}/?h=${securityHash}&portrait=0&title=0&byline=0&badge=0`;
    }
    return srcUrl;
  }
  instantiateInstance() {
    __privateSet(this, _vimeoInstance, new Vimeo.Player(__privateGet(this, _playerElement)));
    this.handlePlayDisallowed(__privateGet(this, _playDisallowed2));
  }
  handlePlayDisallowed(newValue) {
    return __async(this, null, function* () {
      const falseValues = ["false", "null", null, false, void 0];
      __privateSet(this, _playDisallowed2, !falseValues.includes(newValue));
      const isPaused = yield __privateGet(this, _vimeoInstance).getPaused();
      const playingWhenNotAllowed = __privateGet(this, _playDisallowed2) && !isPaused;
      this.classList.toggle("pe-none", __privateGet(this, _playDisallowed2) || false);
      if (playingWhenNotAllowed) {
        yield __privateGet(this, _vimeoInstance).pause();
      }
    });
  }
};
_rootElement5 = new WeakMap();
_scriptElement3 = new WeakMap();
_playerElement = new WeakMap();
_videoId4 = new WeakMap();
_vimeoInstance = new WeakMap();
_playDisallowed2 = new WeakMap();
customElements.define("sjwc-vimeo", VimeoEmbed);

// src/youtube-embed.js
var attributes7 = {
  videoId: "video-id",
  playDisallowed: "play-disallowed"
};
var _rootElement6, _playerElement2, _scriptElement4, _videoId5, _playerId2, _youtubeInstance, _playDisallowed3;
var YouTubeEmbed = class extends HTMLElement {
  constructor() {
    super(...arguments);
    __privateAdd(this, _rootElement6, void 0);
    __privateAdd(this, _playerElement2, void 0);
    __privateAdd(this, _scriptElement4, void 0);
    __privateAdd(this, _videoId5, void 0);
    __privateAdd(this, _playerId2, void 0);
    __privateAdd(this, _youtubeInstance, void 0);
    __privateAdd(this, _playDisallowed3, void 0);
  }
  static get observedAttributes() {
    return Object.values(attributes7);
  }
  connectedCallback() {
    __privateSet(this, _videoId5, this.getAttribute(attributes7.videoId));
    __privateSet(this, _playerId2, `yt_${__privateGet(this, _videoId5)}_${v4_default()}`);
    __privateSet(this, _playDisallowed3, this.hasAttribute(attributes7.playDisallowed) && this.getAttribute(attributes7.playDisallowed) !== "false");
    __privateSet(this, _rootElement6, document.createElement("div"));
    __privateGet(this, _rootElement6).classList.add("embed-container");
    __privateSet(this, _playerElement2, document.createElement("div"));
    const youtubePlayerAttributes = {
      width: "768",
      height: "453",
      frameborder: "0",
      allowfullscreen: "",
      id: __privateGet(this, _playerId2),
      class: "yt-player"
    };
    Object.entries(youtubePlayerAttributes).forEach(([key, value]) => __privateGet(this, _playerElement2).setAttribute(key, value));
    this.handleScript();
    __privateGet(this, _rootElement6).appendChild(__privateGet(this, _playerElement2));
    this.appendChild(__privateGet(this, _rootElement6));
  }
  attributeChangedCallback(name, oldValue, newValue) {
    if (name === attributes7.playDisallowed && !!__privateGet(this, _youtubeInstance)) {
      this.handlePlayDisallowed(newValue);
    }
  }
  handleScript() {
    const scriptAttributes = {
      type: "text/javascript",
      src: `https://www.youtube.com/iframe_api`,
      async: true
    };
    __privateSet(this, _scriptElement4, HelperService.loadScript(
      scriptAttributes,
      __privateGet(this, _rootElement6),
      this.instantiateInstance.bind(this)
    ));
  }
  instantiateInstance() {
    const onReady = () => {
      __privateSet(this, _youtubeInstance, new YT.Player(__privateGet(this, _playerId2), {
        videoId: __privateGet(this, _videoId5),
        playerVars: {
          rel: 0
        }
      }));
      this.handlePlayDisallowed();
    };
    YT.ready(onReady);
  }
  handlePlayDisallowed(newValue) {
    if (!__privateGet(this, _youtubeInstance))
      return;
    __privateSet(this, _playDisallowed3, newValue === "true");
    const activePlayerStates = [0, 1, 3];
    const playerState = __privateGet(this, _youtubeInstance).getPlayerState();
    const playerIsActive = activePlayerStates.includes(playerState);
    const playingWhenNotAllowed = playerIsActive && __privateGet(this, _playDisallowed3);
    this.classList.toggle("pe-none", __privateGet(this, _playDisallowed3) || false);
    if (playingWhenNotAllowed) {
      __privateGet(this, _youtubeInstance).pauseVideo();
    }
  }
};
_rootElement6 = new WeakMap();
_playerElement2 = new WeakMap();
_scriptElement4 = new WeakMap();
_videoId5 = new WeakMap();
_playerId2 = new WeakMap();
_youtubeInstance = new WeakMap();
_playDisallowed3 = new WeakMap();
customElements.define("sjwc-youtube", YouTubeEmbed);

// src/wistia-embed.js
var attributes8 = {
  videoId: "video-id",
  class: "wistia-embed",
  name: "wistia-embed",
  playerCompleteCallback: "player-complete-callback",
  playDisallowed: "play-disallowed"
};
var _rootElement7, _videoId6, _playDisallowed4, _playerCompleteCallback, _scriptElement5;
var WistiaEmbed = class extends HTMLElement {
  constructor() {
    super(...arguments);
    __privateAdd(this, _rootElement7, void 0);
    __privateAdd(this, _videoId6, void 0);
    __privateAdd(this, _playDisallowed4, void 0);
    __privateAdd(this, _playerCompleteCallback, void 0);
    __privateAdd(this, _scriptElement5, void 0);
  }
  static get observedAttributes() {
    return [attributes8.videoId, attributes8.playDisallowed];
  }
  connectedCallback() {
    __privateSet(this, _videoId6, this.getAttribute(attributes8.videoId));
    __privateSet(this, _playerCompleteCallback, this.getAttribute(attributes8.playerCompleteCallback));
    __privateSet(this, _playDisallowed4, this.hasAttribute(attributes8.playDisallowed) && this.getAttribute(attributes8.playDisallowed) !== "false");
    __privateSet(this, _rootElement7, document.createElement("div"));
    const playerElement = document.createElement("iframe");
    const playerAttributes = {
      src: `//fast.wistia.net/embed/iframe/${__privateGet(this, _videoId6)}?controlsVisibleOnLoad=false`,
      allowtransparency: "true",
      frameborder: "0",
      scrolling: "no",
      class: attributes8.class,
      name: attributes8.name,
      allowfullscreen: "",
      mozallowfullscreen: "",
      webkitallowfullscreen: "",
      oallowfullscreen: "",
      msallowfullscreen: ""
    };
    Object.keys(playerAttributes).forEach((attr) => playerElement.setAttribute(attr, playerAttributes[attr]));
    this.handleScript();
    __privateGet(this, _rootElement7).appendChild(playerElement);
    this.appendChild(__privateGet(this, _rootElement7));
  }
  handleScript() {
    const scriptAttributes = {
      src: `//fast.wistia.net/assets/external/E-v1.js`
    };
    __privateSet(this, _scriptElement5, HelperService.loadScript(scriptAttributes, __privateGet(this, _rootElement7)));
  }
};
_rootElement7 = new WeakMap();
_videoId6 = new WeakMap();
_playDisallowed4 = new WeakMap();
_playerCompleteCallback = new WeakMap();
_scriptElement5 = new WeakMap();
customElements.define("sjwc-wistia", WistiaEmbed);

// src/video.js
var attributes9 = {
  type: "type",
  videoId: "video-id",
  aspectRatio: "aspect-ratio",
  playDisallowed: "play-disallowed",
  fullWidth: "full-width",
  playerId: "player-id",
  token: "token",
  processingCopy: "processing-copy",
  errorCopy: "error-copy",
  fullscreenLesson: "fullscreen-lesson"
};
var ELEMENT_TYPES = /* @__PURE__ */ new Map([
  ["VIDEO_YOUTUBE", "sjwc-youtube"],
  ["VIDEO_VIMEO", "sjwc-vimeo"],
  ["VIDEO_JWPLAYER", "sjwc-jwplayer"],
  ["VIDEO_WISTIA", "sjwc-wistia"],
  ["VIDEO_KOLLECTIVE", "sjwc-kollective"],
  ["VIDEO_BRIGHTCOVE", "sjwc-brightcove"],
  ["VIDEO_KALTURA", "sjwc-kaltura"],
  ["VIDYARD", "sjwc-vidyard"]
]);
var defaultWidescreenAspectRatio = "1.7777777777777777";
var widescreenAspectRatios = [defaultWidescreenAspectRatio, "1.76"];
var _rootElement8, _type, _videoMaxContainer, _videoComponent, _flexVideoContainer, _aspectRatio, _fullWidth, _fullscreenLesson, _requiredChildAttributes;
var VideoEmbed = class extends HTMLElement {
  constructor() {
    super(...arguments);
    __privateAdd(this, _rootElement8, void 0);
    __privateAdd(this, _type, void 0);
    __privateAdd(this, _videoMaxContainer, void 0);
    __privateAdd(this, _videoComponent, void 0);
    __privateAdd(this, _flexVideoContainer, void 0);
    __privateAdd(this, _aspectRatio, void 0);
    __privateAdd(this, _fullWidth, void 0);
    __privateAdd(this, _fullscreenLesson, void 0);
    __privateAdd(this, _requiredChildAttributes, [attributes9.videoId]);
  }
  static get observedAttributes() {
    return Object.values(attributes9);
  }
  connectedCallback() {
    __privateSet(this, _type, this.getAttribute(attributes9.type));
    __privateSet(this, _aspectRatio, this.getAttribute(attributes9.aspectRatio));
    __privateSet(this, _fullWidth, this.hasAttribute("full-width") && this.getAttribute("full-width") !== "false");
    __privateSet(this, _fullscreenLesson, this.getAttribute("fullscreen-lesson") === "true");
    this.setVideoType();
    this.appendChild(__privateGet(this, _rootElement8));
    this.calculateVideoLessonHeight();
    window.addEventListener("resize", _.debounce(this.calculateVideoLessonHeight.bind(this), 100));
  }
  disconnectedCallback() {
    window.removeEventListener("resize", _.debounce(this.calculateVideoLessonHeight.bind(this), 100));
    __privateGet(this, _rootElement8).remove();
  }
  attributeChangedCallback(name, oldValue, newValue) {
    if (!__privateGet(this, _videoComponent))
      return;
    this.updateAttribute(name, newValue);
  }
  setVideoType() {
    if (!__privateGet(this, _type))
      throw new Error('"type" attribute is required');
    const optionalAttributes = [
      attributes9.aspectRatio,
      attributes9.playDisallowed,
      attributes9.playerId,
      attributes9.token,
      attributes9.fullWidth,
      attributes9.processingCopy,
      attributes9.errorCopy
    ];
    let setFlexVideoContainer = false;
    const componentElementTag = ELEMENT_TYPES.get(__privateGet(this, _type));
    if (!componentElementTag) {
      throw new Error(`sjwc-video does not support video type ${__privateGet(this, _type)}`);
    }
    const flexVideoContainerTypes = [
      "VIDEO_VIMEO",
      "VIDEO_YOUTUBE",
      "VIDEO_WISTIA",
      "VIDEO_BRIGHTCOVE",
      "VIDEO_KOLLECTIVE",
      "VIDEO_KALTURA",
      "VIDYARD"
    ];
    if (flexVideoContainerTypes.includes(__privateGet(this, _type))) {
      setFlexVideoContainer = true;
    }
    this.validateAttributes();
    this.renderPlayer(
      componentElementTag,
      [...__privateGet(this, _requiredChildAttributes), ...optionalAttributes],
      setFlexVideoContainer
    );
  }
  validateAttributes() {
    __privateGet(this, _requiredChildAttributes).forEach((attr) => {
      if (!this.hasAttribute(attr))
        throw new Error(`"${attr}" attribute is required`);
    });
  }
  calculateVideoLessonHeight() {
    var _a;
    if (__privateGet(this, _fullWidth))
      return;
    const { innerHeight, innerWidth } = window;
    const $flexVideoContainer = (_a = __privateGet(this, _flexVideoContainer)) != null ? _a : __privateGet(this, _rootElement8).querySelector(".flex-video");
    const $header = document.getElementById("header");
    const $lessonMainContainer = document.getElementById("lesson-main");
    const $lessonFooter = document.getElementById("lp-footer");
    const $lessonTop = document.querySelector(".lesson-top");
    if (!$header || !$lessonFooter || !$lessonMainContainer) {
      const maxHeight = innerHeight;
      __privateGet(this, _videoMaxContainer).style.width = `${maxHeight * __privateGet(this, _aspectRatio)}px`;
      return;
    }
    $flexVideoContainer.style.marginTop = 0;
    const headerHeight = $header.offsetHeight;
    const footerHeight = $lessonFooter.offsetHeight;
    const lessonTopHeight = $lessonTop ? $lessonTop.offsetHeight : 0;
    const lessonMainPaddingTop = parseInt(window.getComputedStyle($lessonMainContainer).paddingTop, 10);
    const aboveTheFoldHeight = headerHeight + footerHeight + lessonTopHeight + lessonMainPaddingTop * 2;
    const lessonWindowHeight = innerHeight - aboveTheFoldHeight;
    const heightGutter = 48;
    const aspectRatioWidth = lessonWindowHeight * __privateGet(this, _aspectRatio) - heightGutter;
    if (!__privateGet(this, _fullscreenLesson)) {
      __privateGet(this, _videoMaxContainer).style.width = "100%";
      return;
    }
    if (__privateGet(this, _fullscreenLesson) && aspectRatioWidth > innerWidth) {
      const aspectRatioWidthGreaterThanWindow = aspectRatioWidth > innerWidth;
      __privateGet(this, _videoMaxContainer).style.width = aspectRatioWidthGreaterThanWindow ? `${innerWidth - heightGutter}px` : `${aspectRatioWidth}px`;
      return;
    }
    __privateGet(this, _videoMaxContainer).style.width = `${aspectRatioWidth}px`;
  }
  renderPlayer(tag, tagAttributes, setFlexVideoContainer) {
    __privateSet(this, _rootElement8, document.createElement("div"));
    __privateGet(this, _rootElement8).classList.add(
      "course-fixed-content-video",
      "course-fixed-content-video-flexible-lesson",
      "sjwc-video"
    );
    __privateSet(this, _videoMaxContainer, document.createElement("div"));
    __privateGet(this, _videoMaxContainer).classList.add("video-max");
    if (setFlexVideoContainer) {
      const isWidescreen = widescreenAspectRatios.includes(__privateGet(this, _aspectRatio));
      __privateSet(this, _flexVideoContainer, document.createElement("div"));
      __privateGet(this, _flexVideoContainer).classList.add("flex-video", ELEMENT_TYPES.get(__privateGet(this, _type)));
      const widescreenClassExceptions = [
        "VIDEO_BRIGHTCOVE",
        "VIDEO_VIMEO",
        "VIDYARD",
        "VIDEO_KALTURA",
        "VIDEO_YOUTUBE"
      ];
      __privateGet(this, _flexVideoContainer).classList.toggle(
        "widescreen",
        isWidescreen && !widescreenClassExceptions.includes(__privateGet(this, _type))
      );
      __privateSet(this, _videoComponent, document.createElement(tag));
      tagAttributes.forEach((attr) => {
        if (this.hasAttribute(attr))
          __privateGet(this, _videoComponent).setAttribute(attr, this.getAttribute(attr));
      });
      __privateGet(this, _flexVideoContainer).appendChild(__privateGet(this, _videoComponent));
      __privateGet(this, _videoMaxContainer).appendChild(__privateGet(this, _flexVideoContainer));
    } else {
      __privateSet(this, _videoComponent, document.createElement(tag));
      tagAttributes.forEach((attr) => {
        if (this.hasAttribute(attr))
          __privateGet(this, _videoComponent).setAttribute(attr, this.getAttribute(attr));
      });
      __privateGet(this, _videoMaxContainer).appendChild(__privateGet(this, _videoComponent));
    }
    __privateGet(this, _rootElement8).appendChild(__privateGet(this, _videoMaxContainer));
  }
  updateAttribute(name, newValue) {
    if (newValue === null) {
      __privateGet(this, _videoComponent).removeAttribute(name);
      return;
    }
    if (name === attributes9.playDisallowed)
      this.handlePlayDisallowed(newValue);
    if (name === attributes9.fullscreenLesson) {
      __privateSet(this, _fullscreenLesson, newValue);
      this.calculateVideoLessonHeight();
    }
    __privateGet(this, _videoComponent).setAttribute(name, newValue);
  }
  handlePlayDisallowed(newValue) {
    if (newValue === "true") {
      __privateGet(this, _rootElement8).setAttribute("tabindex", "-1");
      __privateGet(this, _rootElement8).querySelectorAll("*").forEach((el) => {
        if (el.getAttribute("tabindex") === "0") {
          el.setAttribute("tabindex", "-1");
        }
      });
    }
    if (!newValue || newValue === "false") {
      __privateGet(this, _rootElement8).removeAttribute("tabindex");
      __privateGet(this, _rootElement8).querySelectorAll("*").forEach((el) => {
        if (el.getAttribute("tabindex") === "-1") {
          el.setAttribute("tabindex", "0");
        }
      });
    }
  }
};
_rootElement8 = new WeakMap();
_type = new WeakMap();
_videoMaxContainer = new WeakMap();
_videoComponent = new WeakMap();
_flexVideoContainer = new WeakMap();
_aspectRatio = new WeakMap();
_fullWidth = new WeakMap();
_fullscreenLesson = new WeakMap();
_requiredChildAttributes = new WeakMap();
customElements.define("sjwc-video", VideoEmbed);

// src/kollective-embed.js
var attributes10 = { videoId: "video-id" };
var _rootElement9, _videoId7;
var KollectiveEmbed = class extends HTMLElement {
  constructor() {
    super(...arguments);
    __privateAdd(this, _rootElement9, void 0);
    __privateAdd(this, _videoId7, void 0);
  }
  static get observedAttributes() {
    return [attributes10.videoId];
  }
  connectedCallback() {
    __privateSet(this, _videoId7, this.getAttribute(attributes10.videoId));
    __privateSet(this, _rootElement9, document.createElement("iframe"));
    const baseUrl = __privateGet(this, _videoId7);
    const params = {
      repeat: true,
      client: false,
      context: "embed",
      overlay: false,
      name: false,
      description: false,
      created_by: false,
      created_at: false,
      rating: false,
      sharing: false,
      favorites: false,
      chapters: false,
      tags: false,
      flagging: false,
      views: false,
      length: false,
      downloading: true,
      autoPlay: false
    };
    const url = new URL(baseUrl);
    Object.keys(params).forEach((key) => url.searchParams.append(key, params[key]));
    const playerFrameAttrs = {
      src: url,
      scrolling: "no",
      allowfullscreen: "true",
      style: "border:none;width:100%;height:100%"
    };
    Object.entries(playerFrameAttrs).forEach(([key, value]) => __privateGet(this, _rootElement9).setAttribute(key, value));
    this.appendChild(__privateGet(this, _rootElement9));
  }
};
_rootElement9 = new WeakMap();
_videoId7 = new WeakMap();
customElements.define("sjwc-kollective", KollectiveEmbed);

// src/brightcove-embed.js
var attributes11 = { videoId: "video-id" };
var _rootElement10, _videoId8, _playerFrame;
var BrightcovePlayer = class extends HTMLElement {
  constructor() {
    super(...arguments);
    __privateAdd(this, _rootElement10, void 0);
    __privateAdd(this, _videoId8, void 0);
    __privateAdd(this, _playerFrame, void 0);
  }
  static get observedAttributes() {
    return [attributes11.videoId];
  }
  connectedCallback() {
    __privateSet(this, _videoId8, this.getAttribute(attributes11.videoId));
    __privateSet(this, _rootElement10, document.createElement("div"));
    __privateGet(this, _rootElement10).classList.add("embed-container");
    __privateSet(this, _playerFrame, document.createElement("iframe"));
    const playerFrameAttrs = {
      src: `https://bcove.video/${__privateGet(this, _videoId8)}`,
      frameborder: "0",
      allowfullscreen: "true"
    };
    Object.entries(playerFrameAttrs).forEach(([key, value]) => __privateGet(this, _playerFrame).setAttribute(key, value));
    __privateGet(this, _rootElement10).appendChild(__privateGet(this, _playerFrame));
    this.appendChild(__privateGet(this, _rootElement10));
  }
};
_rootElement10 = new WeakMap();
_videoId8 = new WeakMap();
_playerFrame = new WeakMap();
customElements.define("sjwc-brightcove", BrightcovePlayer);

// src/utils/constants.js
var DEFAULT_COLLAPSIBLE_SECTION_TOGGLE_COPY = {
  DEFAULT: "Show More",
  EXPANDED: "Show Less"
};

// src/inline-collapsible-section.js
var { createElement, replaceClass } = HelperService;
var hideClass = "hide";
var attributes12 = {
  maxCharacters: "max-characters",
  content: "content",
  contentWrapperClass: "content-wrapper-class",
  contentWrapperId: "content-wrapper-id",
  secondaryContent: "secondary-content",
  secondaryContentWrapperClass: "secondary-content-wrapper-class",
  secondaryContentWrapperId: "secondary-content-wrapper-id",
  sectionId: "section-id",
  title: "title",
  expandedTitle: "expanded-title",
  checked: "checked"
};
var _maxCharacters, _content, _secondaryContent, _collapsibleSectionTrigger, _contentWrapper, _secondaryContentWrapper, _sectionId, _title, _expandedTitle, _checked, _aboveTheFoldText, _hasDualContent, _initialized2;
var InlineCollapsibleSection = class extends HTMLElement {
  constructor() {
    super();
    __privateAdd(this, _maxCharacters, void 0);
    __privateAdd(this, _content, void 0);
    __privateAdd(this, _secondaryContent, void 0);
    __privateAdd(this, _collapsibleSectionTrigger, void 0);
    __privateAdd(this, _contentWrapper, void 0);
    __privateAdd(this, _secondaryContentWrapper, void 0);
    __privateAdd(this, _sectionId, void 0);
    __privateAdd(this, _title, void 0);
    __privateAdd(this, _expandedTitle, void 0);
    __privateAdd(this, _checked, void 0);
    __privateAdd(this, _aboveTheFoldText, void 0);
    __privateAdd(this, _hasDualContent, void 0);
    __privateAdd(this, _initialized2, false);
    __privateSet(this, _sectionId, this.getAttribute(attributes12.sectionId) || v4_default());
    __privateSet(this, _title, this.getAttribute(attributes12.title) || DEFAULT_COLLAPSIBLE_SECTION_TOGGLE_COPY.DEFAULT);
    __privateSet(this, _expandedTitle, this.getAttribute(attributes12.expandedTitle) || DEFAULT_COLLAPSIBLE_SECTION_TOGGLE_COPY.EXPANDED);
    __privateSet(this, _checked, this.hasAttribute(attributes12.checked) && this.getAttribute(attributes12.checked) !== "false");
    __privateSet(this, _hasDualContent, !!this.getAttribute(attributes12.secondaryContent));
  }
  static get observedAttributes() {
    return Object.values(attributes12);
  }
  connectedCallback() {
    if (__privateGet(this, _initialized2))
      return;
    this.renderInlineCollapsibleSection();
    this.handleContent();
    __privateGet(this, _collapsibleSectionTrigger).addEventListener("toggle", this.handleToggle.bind(this));
    __privateSet(this, _initialized2, true);
  }
  disconnectedCallback() {
    __privateGet(this, _collapsibleSectionTrigger).removeEventListener("toggle", this.handleToggle.bind(this));
  }
  attributeChangedCallback(name, oldValue, newValue) {
    var _a;
    if (!this.isConnected || !((_a = __privateGet(this, _collapsibleSectionTrigger)) == null ? void 0 : _a.isConnected))
      return;
    const contentAttrs = [attributes12.content, attributes12.maxCharacters, attributes12.secondaryContent];
    if (contentAttrs.includes(name)) {
      __privateSet(this, _hasDualContent, !!this.getAttribute(attributes12.secondaryContent));
      this.handleContent();
    }
    if (name === attributes12.contentWrapperId) {
      __privateGet(this, _contentWrapper).setAttribute(name, newValue);
    }
    if (name === attributes12.contentWrapperClass) {
      replaceClass(__privateGet(this, _secondaryContentWrapper), oldValue, newValue);
    }
    if (name === attributes12.secondaryContentWrapperId && __privateGet(this, _hasDualContent)) {
      __privateGet(this, _secondaryContentWrapper).setAttribute(name, newValue);
    }
    if (name === attributes12.secondaryContentWrapperClass && __privateGet(this, _hasDualContent)) {
      replaceClass(__privateGet(this, _secondaryContentWrapper), oldValue, newValue);
    }
    const triggerAttrs = [attributes12.title, attributes12.checked, attributes12.sectionId, attributes12.expandedTitle];
    if (triggerAttrs.includes(name)) {
      __privateGet(this, _collapsibleSectionTrigger).setAttribute(name, newValue);
    }
    if (name === attributes12.sectionId) {
      __privateGet(this, _collapsibleSectionTrigger).setAttribute(attributes12.sectionId, newValue);
      if (!this.getAttribute(attributes12.contentWrapperId)) {
        __privateGet(this, _contentWrapper).setAttribute("id", `inline-collapsible-section-content-${newValue}`);
      }
      if (!this.getAttribute(attributes12.secondaryContentWrapperId) && __privateGet(this, _hasDualContent)) {
        __privateGet(this, _secondaryContentWrapper).setAttribute("id", `inline-collapsible-section-secondary-content-${newValue}`);
      }
    }
  }
  renderContentWrapper(name, attrContentWrapperClass, attrContentWrapperId, hide) {
    const contentWrapperClasses = [name];
    if (hide) {
      contentWrapperClasses.push(hideClass);
    }
    if (attrContentWrapperClass) {
      contentWrapperClasses.push(attrContentWrapperClass);
    }
    return createElement("div", {
      class: contentWrapperClasses.join(" "),
      id: attrContentWrapperId || `${name}-${__privateGet(this, _sectionId)}`
    });
  }
  renderInlineCollapsibleSection() {
    __privateSet(this, _contentWrapper, this.renderContentWrapper(
      "inline-collapsible-section-content",
      this.getAttribute(attributes12.contentWrapperClass),
      this.getAttribute(attributes12.contentWrapperId)
    ));
    this.appendChild(__privateGet(this, _contentWrapper));
    if (this.getAttribute(attributes12.secondaryContent)) {
      __privateSet(this, _secondaryContentWrapper, this.renderContentWrapper(
        "inline-collapsible-section-secondary-content",
        this.getAttribute(attributes12.secondaryContentWrapperClass),
        this.getAttribute(attributes12.secondaryContentWrapperId),
        true
      ));
      this.appendChild(__privateGet(this, _secondaryContentWrapper));
    }
    __privateSet(this, _collapsibleSectionTrigger, createElement("sjwc-collapsible-section-trigger", {
      [attributes12.sectionId]: __privateGet(this, _sectionId),
      [attributes12.title]: __privateGet(this, _title),
      [attributes12.checked]: __privateGet(this, _checked),
      [attributes12.expandedTitle]: __privateGet(this, _expandedTitle)
    }));
    this.appendChild(__privateGet(this, _collapsibleSectionTrigger));
  }
  handleToggle(e) {
    __privateSet(this, _checked, e.detail.checked);
    this.handleContent();
  }
  handleContent() {
    if (__privateGet(this, _hasDualContent)) {
      this.handleDualContent();
    } else {
      this.handleSingularContent();
    }
    this.setContentSpacing();
  }
  handleSingularContent() {
    __privateSet(this, _content, this.getAttribute(attributes12.content) || "");
    __privateSet(this, _maxCharacters, this.getAttribute(attributes12.maxCharacters) || 200);
    const truncatedContent = __privateGet(this, _content).slice(0, __privateGet(this, _maxCharacters));
    let truncatedCopy = truncatedContent;
    if (truncatedContent.length < __privateGet(this, _content).length)
      truncatedCopy += "...";
    __privateSet(this, _aboveTheFoldText, !__privateGet(this, _checked) ? truncatedCopy : __privateGet(this, _content));
    __privateGet(this, _collapsibleSectionTrigger).classList.toggle(hideClass, truncatedContent === __privateGet(this, _content));
    __privateGet(this, _contentWrapper).innerHTML = __privateGet(this, _aboveTheFoldText);
  }
  handleDualContent() {
    __privateSet(this, _content, this.getAttribute(attributes12.content) || "");
    __privateSet(this, _maxCharacters, this.getAttribute(attributes12.maxCharacters) || 200);
    __privateSet(this, _secondaryContent, this.getAttribute(attributes12.secondaryContent) || "");
    const primaryContentAtMaxChar = __privateGet(this, _content).length >= __privateGet(this, _maxCharacters);
    const hidePrimaryContent = !__privateGet(this, _content);
    let truncatedContent = "";
    let truncatedCopy = "";
    if (hidePrimaryContent) {
      __privateGet(this, _contentWrapper).classList.add(hideClass);
      truncatedContent = __privateGet(this, _secondaryContent).slice(0, __privateGet(this, _maxCharacters));
      truncatedCopy = truncatedContent;
      if (__privateGet(this, _maxCharacters) < __privateGet(this, _secondaryContent).length)
        truncatedCopy += "...";
      __privateSet(this, _aboveTheFoldText, !__privateGet(this, _checked) ? truncatedCopy : __privateGet(this, _secondaryContent));
      __privateGet(this, _collapsibleSectionTrigger).classList.toggle(hideClass, truncatedContent === __privateGet(this, _secondaryContent));
      __privateGet(this, _secondaryContentWrapper).classList.remove(hideClass);
      __privateGet(this, _secondaryContentWrapper).innerHTML = __privateGet(this, _aboveTheFoldText);
      return;
    }
    if (primaryContentAtMaxChar) {
      truncatedContent = __privateGet(this, _content).slice(0, __privateGet(this, _maxCharacters));
      truncatedCopy = truncatedContent;
      if (truncatedContent.length < __privateGet(this, _content).length)
        truncatedCopy += "...";
      __privateSet(this, _aboveTheFoldText, !__privateGet(this, _checked) ? truncatedCopy : __privateGet(this, _content));
      __privateGet(this, _collapsibleSectionTrigger).classList.toggle(hideClass, truncatedContent === __privateGet(this, _content));
      __privateGet(this, _secondaryContentWrapper).classList.toggle(hideClass, !__privateGet(this, _checked));
      __privateGet(this, _contentWrapper).innerHTML = __privateGet(this, _aboveTheFoldText);
      __privateGet(this, _secondaryContentWrapper).innerHTML = __privateGet(this, _secondaryContent);
      return;
    }
    if (!primaryContentAtMaxChar) {
      const remainingChars = __privateGet(this, _maxCharacters) - __privateGet(this, _content).length;
      const addedSecondaryContent = __privateGet(this, _secondaryContent).slice(0, remainingChars);
      truncatedContent = `${addedSecondaryContent}...`;
      __privateSet(this, _aboveTheFoldText, !__privateGet(this, _checked) ? truncatedContent : __privateGet(this, _secondaryContent));
      __privateGet(this, _secondaryContentWrapper).classList.remove(hideClass);
      __privateGet(this, _contentWrapper).innerHTML = __privateGet(this, _content);
      __privateGet(this, _secondaryContentWrapper).innerHTML = __privateGet(this, _aboveTheFoldText);
    }
  }
  setContentSpacing() {
    __privateGet(this, _contentWrapper).style.marginTop = "15px";
    __privateGet(this, _contentWrapper).style.marginBottom = "10px";
    if (this.getAttribute(attributes12.secondaryContent)) {
      __privateGet(this, _secondaryContentWrapper).style.marginTop = "15px";
      __privateGet(this, _secondaryContentWrapper).style.marginBottom = "10px";
    }
  }
};
_maxCharacters = new WeakMap();
_content = new WeakMap();
_secondaryContent = new WeakMap();
_collapsibleSectionTrigger = new WeakMap();
_contentWrapper = new WeakMap();
_secondaryContentWrapper = new WeakMap();
_sectionId = new WeakMap();
_title = new WeakMap();
_expandedTitle = new WeakMap();
_checked = new WeakMap();
_aboveTheFoldText = new WeakMap();
_hasDualContent = new WeakMap();
_initialized2 = new WeakMap();
customElements.define("sjwc-inline-collapsible-section", InlineCollapsibleSection);

// src/collapsible-section-trigger.js
var { createElement: createElement2 } = HelperService;
var attributes13 = {
  sectionId: "section-id",
  title: "title",
  expandedTitle: "expanded-title",
  checked: "checked"
};
var events = {
  toggle: "toggle"
};
var _rootElement11, _sectionId2, _inputId, _input, _iconWrapper, _title2, _titleElement2, _expandedTitle2, _checked2;
var CollapsibleSectionTrigger = class extends HTMLElement {
  constructor() {
    super();
    __privateAdd(this, _rootElement11, void 0);
    __privateAdd(this, _sectionId2, void 0);
    __privateAdd(this, _inputId, void 0);
    __privateAdd(this, _input, void 0);
    __privateAdd(this, _iconWrapper, void 0);
    __privateAdd(this, _title2, void 0);
    __privateAdd(this, _titleElement2, void 0);
    __privateAdd(this, _expandedTitle2, void 0);
    __privateAdd(this, _checked2, void 0);
    __privateSet(this, _sectionId2, this.getAttribute(attributes13.sectionId) || v4_default());
    __privateSet(this, _inputId, `checked-${__privateGet(this, _sectionId2)}`);
    __privateSet(this, _checked2, this.hasAttribute(attributes13.checked) && this.getAttribute(attributes13.checked) !== "false");
  }
  static get observedAttributes() {
    return Object.values(attributes13);
  }
  attributeChangedCallback(name, oldValue, newValue) {
    if (!__privateGet(this, _rootElement11) || !__privateGet(this, _rootElement11).isConnected)
      return;
    if (name === attributes13.checked)
      this.handleToggle(newValue);
    if (name === attributes13.title)
      __privateGet(this, _titleElement2).textContent = this.getToggledTitle();
    if (name === attributes13.expandedTitle)
      __privateGet(this, _titleElement2).textContent = this.getToggledTitle();
  }
  connectedCallback() {
    __privateSet(this, _rootElement11, this.renderCollapsibleSectionTrigger());
    this.appendChild(__privateGet(this, _rootElement11));
    __privateGet(this, _input).addEventListener("change", this.handleInputChange.bind(this));
  }
  disconnectedCallback() {
    __privateGet(this, _input).removeEventListener("change", this.handleInputChange.bind(this));
    this.removeChild(__privateGet(this, _rootElement11));
  }
  handleInputChange(e) {
    this.handleToggle(e.target.checked);
    this.emitToggleEvent();
  }
  emitToggleEvent() {
    const event = new CustomEvent(events.toggle, {
      bubbles: true,
      detail: {
        sectionId: __privateGet(this, _sectionId2),
        checked: __privateGet(this, _input).checked
      }
    });
    this.dispatchEvent(event);
  }
  renderCollapsibleSectionTrigger() {
    __privateSet(this, _titleElement2, createElement2("span", {
      id: `title-${__privateGet(this, _sectionId2)}`,
      textContent: this.getToggledTitle()
    }));
    const $titleWrapper = createElement2(
      "p",
      {
        class: `checked-${__privateGet(this, _sectionId2)}`
      },
      [__privateGet(this, _titleElement2)]
    );
    const $expandIcon = createElement2("span", {
      class: "inline-collapsible-section__label__icons__expand"
    });
    const $collapseIcon = createElement2("span", {
      class: "inline-collapsible-section__label__icons__collapse"
    });
    __privateSet(this, _iconWrapper, createElement2(
      "div",
      {
        class: "inline-collapsible-section__label__icons",
        id: `plus-${__privateGet(this, _sectionId2)}`,
        tabindex: 0
      },
      [$expandIcon, $collapseIcon]
    ));
    const $label = createElement2(
      "label",
      {
        class: "inline-collapsible-section__label",
        for: `checked-${__privateGet(this, _sectionId2)}`
      },
      [__privateGet(this, _iconWrapper), $titleWrapper]
    );
    const inputAttrs = {
      id: `${__privateGet(this, _inputId)}`,
      class: "inline-collapsible-section__toggle",
      type: "checkbox"
    };
    if (__privateGet(this, _checked2)) {
      inputAttrs.checked = true;
    }
    __privateSet(this, _input, createElement2("input", inputAttrs));
    const $rootElement = createElement2(
      "div",
      {
        class: "inline-collapsible-section",
        id: `inline-collapsible-section-${__privateGet(this, _sectionId2)}`
      },
      [__privateGet(this, _input), $label]
    );
    return $rootElement;
  }
  handleToggle(newValue) {
    const falseValues = ["false", "null", null, false];
    __privateSet(this, _checked2, !falseValues.includes(newValue));
    __privateGet(this, _input).toggleAttribute(attributes13.checked, __privateGet(this, _checked2));
    __privateGet(this, _input).checked = __privateGet(this, _checked2);
    this.toggleAttribute(attributes13.checked, __privateGet(this, _checked2));
    __privateGet(this, _titleElement2).textContent = this.getToggledTitle();
  }
  getToggledTitle() {
    __privateSet(this, _title2, this.getAttribute(attributes13.title) || DEFAULT_COLLAPSIBLE_SECTION_TOGGLE_COPY.DEFAULT);
    __privateSet(this, _expandedTitle2, this.getAttribute(attributes13.expandedTitle) || DEFAULT_COLLAPSIBLE_SECTION_TOGGLE_COPY.EXPANDED);
    return __privateGet(this, _checked2) ? __privateGet(this, _expandedTitle2) : __privateGet(this, _title2);
  }
};
_rootElement11 = new WeakMap();
_sectionId2 = new WeakMap();
_inputId = new WeakMap();
_input = new WeakMap();
_iconWrapper = new WeakMap();
_title2 = new WeakMap();
_titleElement2 = new WeakMap();
_expandedTitle2 = new WeakMap();
_checked2 = new WeakMap();
customElements.define("sjwc-collapsible-section-trigger", CollapsibleSectionTrigger);
